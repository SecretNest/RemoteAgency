<?xml version="1.0" encoding="utf-8"?>
<topic id="bb409edb-480f-4ffe-abb3-cb8b39fc033c" revisionNumber="1">
  <developerWalkthroughDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <introduction>
      <para>Remote Agency supports method overloading like coding elsewhere.</para>
    </introduction>

    <token>Example Prerequisites Reference</token>

    <section>
      <title>Brief</title>
      <content>
        <para>Remote Agency supports method overloading in the same as the dotnet language specification.</para>
        <para>Each asset need a unique name which is generated by default. User can specify the asset name using <codeEntityReference qualifyHint="false">T:SecretNest.RemoteAgency.Attributes.CustomizedAssetNameAttribute</codeEntityReference> but an exception will be thrown when name conflicts.</para>
      </content>
    </section>

    <section>
      <title>Steps</title>
      <content>
        <procedure>
          <steps class="ordered">
            <step>
              <content>
                <para>Create an interface that contains all the assets used for communication.</para>
                <codeReference>Example1#Interface</codeReference>
                <alert class="note">
                  <para>When unmarking <codeEntityReference qualifyHint="false">T:SecretNest.RemoteAgency.Attributes.CustomizedAssetNameAttribute</codeEntityReference> from interface, an instance of <codeEntityReference qualifyHint="false">T:SecretNest.RemoteAgency.Inspecting.AssetNameConflictException</codeEntityReference> will be thrown because the name "AddDouble" is designated twice.</para>
                </alert>
                <alert class="note">
                  <para>The supporting of Async method, which returns a task as result, is optimized by Remote Agency by marking them with <codeEntityReference qualifyHint="false">T:SecretNest.RemoteAgency.Attributes.AsyncMethodAttribute</codeEntityReference>. See <link xlink:href="b6910a74-dde5-4d20-ac0d-4fb1231cea87" /> for details.</para>
                </alert>
              </content>
            </step>
            <step>
              <content>
                <para>Create a server class that implement the interface created above.</para>
                <codeReference>Example1#Server</codeReference>
              </content>
            </step>
            <step>
              <content>
                <para>Place this code to a method, <codeInline>main</codeInline> method for example.</para>
                <codeReference>Example1#Test</codeReference>
                <token>CreateProxy with Id</token>
              </content>
            </step>
            <step>
              <content>
                <para>Run the example.</para>
              </content>
            </step>
          </steps>
        </procedure>
      </content>
    </section>

    <relatedTopics>
      <link xlink:href="1e4e6ad4-f0b5-4925-9a9f-4e2704e27d6a">Examples</link>
      <codeEntityReference qualifyHint="false">T:SecretNest.RemoteAgency.Attributes.CustomizedAssetNameAttribute</codeEntityReference>
      <codeEntityReference qualifyHint="false">M:SecretNest.RemoteAgency.RemoteAgencyBase.CreateWithBinarySerializer(System.Boolean,System.Nullable{System.Guid})</codeEntityReference>
      <codeEntityReference qualifyHint="false">M:SecretNest.RemoteAgency.RemoteAgency`2.CreateProxy``1(System.Guid,System.Guid,System.Int32,System.Boolean)</codeEntityReference>
      <link xlink:href="beb637a2-3887-49ff-93f3-1f71b095aa7e" />
    </relatedTopics>
  </developerWalkthroughDocument>
</topic>
