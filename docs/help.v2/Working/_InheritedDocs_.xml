<doc>
  <assembly>
    <name>_InheritedDocs_</name>
  </assembly>
  <members>
  <member name="M:SecretNest.RemoteAgency.AssemblyBuilding.AfterTypeAndAssemblyBuiltEventArgs.Dispose">
  
<summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary></member><member name="M:SecretNest.RemoteAgency.Inspecting.EntityPropertyNameConflictException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
  
<summary>When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.</summary><param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param><param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param><exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (<see langword="Nothing" /> in Visual Basic).</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception></member><member name="M:SecretNest.RemoteAgency.Inspecting.InvalidParameterAttributeDataException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
  
<summary>When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.</summary><param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param><param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param><exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (<see langword="Nothing" /> in Visual Basic).</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception></member><member name="M:SecretNest.RemoteAgency.Inspecting.InvalidAttributeDataException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
  
<summary>When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.</summary><param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param><param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param><exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (<see langword="Nothing" /> in Visual Basic).</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception></member><member name="M:SecretNest.RemoteAgency.RemoteAgency`2.CloseInstance(System.Guid)">
  
<summary>
            Closes the proxy or service wrapper by instance id.
            </summary><param name="instanceId">Instance id of the proxy or service wrapper to be closed.</param><returns>Result. <see langword="true" /> when instance is located and closed; <see langword="false" /> when instance is not found.</returns><exception cref="T:System.AggregateException">Thrown when exception occurred while disposing instance.</exception></member><member name="M:SecretNest.RemoteAgency.RemoteAgency`2.CloseAllInstances(System.Boolean)">
  
<summary>
            Closes all proxy and service wrapper objects.
            </summary><param name="sendSpecialCommand">Whether need to send special command to notify the remote site. Default is <see langword="true" />.</param><exception cref="T:System.AggregateException">Thrown when exception occurred while disposing instances.</exception></member><member name="M:SecretNest.RemoteAgency.RemoteAgency`2.CreateProxy(System.Type,System.Guid,System.Guid,System.Guid,System.Int32,System.Boolean)">
  
<summary>
            Creates proxy of the interface and instance id specified.
            </summary><param name="sourceInterface">Type of the service contract interface to be implemented by this proxy.</param><param name="targetSiteId">Target site id of the proxy instance to be created.</param><param name="targetInstanceId">Target instance id of the proxy instance to be created.</param><param name="instanceId">Id of the proxy instance to be created. Cannot be set to <see cref="T:System.Guid" />.Empty.</param><param name="defaultTimeout">Default timeout in milliseconds for all operations; or -1 to indicate that the waiting does not time out. Value cannot be 0. Default value is 90000 (90 sec).</param><param name="buildServiceWrapperWithProxy">When building is required, builds service wrapper and its required entities in the same assembly. Default value is <see langword="true" />.</param><returns>The created proxy.</returns><remarks>The types required will be created when necessary.</remarks><event cref="E:SecretNest.RemoteAgency.RemoteAgencyBase.BeforeTypeCreated">Raised before type building finished when a type is required for building.</event><event cref="E:SecretNest.RemoteAgency.RemoteAgencyBase.BeforeAssemblyCreated">Raised before module and assembly building finished when a type is required for building.</event><event cref="E:SecretNest.RemoteAgency.RemoteAgencyBase.AfterTypeAndAssemblyBuilt">Raised after the assembly built when a type is required for building.</event></member><member name="M:SecretNest.RemoteAgency.RemoteAgency`2.CreateProxy(System.Type,System.Guid,System.Guid,System.Int32,System.Boolean)">
  
<summary>
            Creates proxy of the interface specified.
            </summary><param name="sourceInterface">Type of the service contract interface to be implemented by this proxy.</param><param name="targetSiteId">Target site id of the proxy instance to be created.</param><param name="targetInstanceId">Target instance id of the proxy instance to be created.</param><param name="defaultTimeout">Default timeout in milliseconds for all operations; or -1 to indicate that the waiting does not time out. Value cannot be 0. Default value is 90000 (90 sec).</param><param name="buildServiceWrapperWithProxy">When building is required, builds service wrapper and its required entities in the same assembly. Default value is <see langword="true" />.</param><returns>The created proxy.</returns><remarks>The types required will be created when necessary.</remarks><event cref="E:SecretNest.RemoteAgency.RemoteAgencyBase.BeforeTypeCreated">Raised before type building finished when a type is required for building.</event><event cref="E:SecretNest.RemoteAgency.RemoteAgencyBase.BeforeAssemblyCreated">Raised before module and assembly building finished when a type is required for building.</event><event cref="E:SecretNest.RemoteAgency.RemoteAgencyBase.AfterTypeAndAssemblyBuilt">Raised after the assembly built when a type is required for building.</event></member><member name="M:SecretNest.RemoteAgency.RemoteAgency`2.CreateServiceWrapper(System.Type,System.Object,System.Guid,System.Int32,System.Boolean)">
  
<summary>
            Creates service wrapper of the interface, the service object and instance id specified.
            </summary><param name="sourceInterface">Type of service contract interface to be implemented by this service wrapper and have been implemented by the <paramref name="serviceObject" />.</param><param name="serviceObject">The service object to be wrapped.</param><param name="instanceId">Id of the service wrapper instance to be created. Cannot be set to <see cref="T:System.Guid" />.Empty.</param><param name="defaultTimeout">Default timeout in milliseconds for all operations; or -1 to indicate that the waiting does not time out. Value cannot be 0. Default value is 90000 (90 sec).</param><param name="buildProxyWithServiceWrapper">When building is required, builds proxy and its required entities in the same assembly. Default value is <see langword="true" />.</param><remarks>The types required will be created when necessary.</remarks><event cref="E:SecretNest.RemoteAgency.RemoteAgencyBase.BeforeTypeCreated">Raised before type building finished when a type is required for building.</event><event cref="E:SecretNest.RemoteAgency.RemoteAgencyBase.BeforeAssemblyCreated">Raised before module and assembly building finished when a type is required for building.</event><event cref="E:SecretNest.RemoteAgency.RemoteAgencyBase.AfterTypeAndAssemblyBuilt">Raised after the assembly built when a type is required for building.</event></member><member name="M:SecretNest.RemoteAgency.RemoteAgency`2.CreateServiceWrapper(System.Type,System.Object,System.Int32,System.Boolean)">
  
<summary>
            Creates service wrapper of the interface and the service object specified.
            </summary><param name="sourceInterface">Type of service contract interface to be implemented by this service wrapper and have been implemented by the <paramref name="serviceObject" />.</param><param name="serviceObject">The service object to be wrapped.</param><param name="defaultTimeout">Default timeout in milliseconds for all operations; or -1 to indicate that the waiting does not time out. Value cannot be 0. Default value is 90000 (90 sec).</param><param name="buildProxyWithServiceWrapper">When building is required, builds proxy and its required entities in the same assembly. Default value is <see langword="true" />.</param><returns>The id of the created service wrapper instance.</returns><remarks>The types required will be created when necessary.</remarks><event cref="E:SecretNest.RemoteAgency.RemoteAgencyBase.BeforeTypeCreated">Raised before type building finished when a type is required for building.</event><event cref="E:SecretNest.RemoteAgency.RemoteAgencyBase.BeforeAssemblyCreated">Raised before module and assembly building finished when a type is required for building.</event><event cref="E:SecretNest.RemoteAgency.RemoteAgencyBase.AfterTypeAndAssemblyBuilt">Raised after the assembly built when a type is required for building.</event></member><member name="M:SecretNest.RemoteAgency.RemoteAgency`2.TryPing(System.Guid,System.TimeSpan,System.TimeSpan@,System.Guid@,System.Guid@,System.Exception@)">
  
<summary>
            Tries to ping to the default target and get the response.
            </summary><param name="localProxyInstanceId">Instance id of the local proxy which will be used to initiate the ping process.</param><param name="maxWaitingTime">Max waiting time.</param><param name="delay">Will be set to the delay between ping message sending started and response message processing finished.</param><param name="remoteSiteId">Will be set to the sender site id of the response message. Or the target site id of the ping message when no response received.</param><param name="remoteInstanceId">Will be set to the sender instance id of the response message. Or the target instance id of the ping message when no response received.</param><param name="exception">Will be set to the exception object when available.</param><returns>Whether the ping request and response processing are finished successfully.</returns></member><member name="M:SecretNest.RemoteAgency.RemoteAgency`2.ProcessReceivedMessage(SecretNest.RemoteAgency.IRemoteAgencyMessage)">
  
<summary>
            Processes a message received.
            </summary><param name="message">Received message.</param><event cref="E:SecretNest.RemoteAgency.RemoteAgency`2.AfterMessageReceived">Raised after deserialized before further processing.</event></member><member name="M:SecretNest.RemoteAgency.RemoteAgency`2.TryGetWaitingMessageIds(System.Guid,System.Collections.Generic.List{System.Guid}@)">
  
<summary>
            Tries to gets id of all waiting messages.
            </summary><param name="instanceId">Id of proxy or service wrapper instance.</param><param name="messageIds">Id of all waiting messages.</param><returns>Whether the instance is found.</returns></member><member name="M:SecretNest.RemoteAgency.RemoteAgency`2.TryGetWaitingMessage(System.Guid,System.Guid,SecretNest.RemoteAgency.IRemoteAgencyMessage@,System.DateTime@)">
  
<summary>
            Tries to get information of a waiting message.
            </summary><param name="instanceId">Id of proxy or service wrapper instance.</param><param name="messageId">Message id.</param><param name="sentMessage">The request message of this waiting one, which is sent.</param><param name="startWaiting">The time of waiting started. It can be default value of DateTime when waiting is not started.</param><returns>Whether the waiting message is found.</returns></member><member name="M:SecretNest.RemoteAgency.RemoteAgency`2.OnRemoteProxyClosing(System.Guid,System.Nullable{System.Guid})">
  
<summary>
            Unlinks specified remote proxy from the event registered in service wrapper objects.
            </summary><param name="siteId">The site id of the instance of the Remote Agency which managing the closing proxy.</param><param name="proxyInstanceId">The instance id of the closing proxy. When set to null, all proxies from the site specified by <paramref name="siteId" /> will be unlinked. Default value is null.</param><remarks><para>A message to notify the closing is sent automatically while remote proxy closing. Call this method manually if exception is thrown while processing the closing of the remote proxy.</para><para>Service wrapper manages links of all proxies which need to handle events. When remote proxy is closed, message for removing event handlers is sent to the service wrapper. But when something wrong happened, network disconnected or proxy crashed for example, the crucial messages may not be able to transferred correctly. In this case, this method need to be called, or the obsolete links will stay in service wrapper which may cause lags or exceptions while processing events.</para></remarks></member><member name="M:SecretNest.RemoteAgency.RemoteAgency`2.OnRemoteServiceWrapperClosing(System.Guid,System.Nullable{System.Guid})">
  
<summary>
            Resets sticky target site of all affected proxies and unlinks specified remote service wrapper from the event registered in proxy objects when the service wrapper is closing.
            </summary><param name="siteId">The site id of the instance of the Remote Agency which managing the closing service wrapper.</param><param name="serviceWrapperInstanceId">The instance id of the closing service wrapper. When set to <see langword="null" />, all proxies with sticky target site specified by <paramref name="siteId" /> will be reset. Default value is <see langword="null" />.</param><remarks><para>A message to notify the closing is sent automatically while remote service wrapper closing. Call this method manually if exception is thrown while processing the closing of the remote service wrapper.</para><para>Proxy manages links of all service wrappers which is registered as an event raiser. When remote service wrapper is closed, message for removing the link of the event handler is sent to the proxy. But when something wrong happened, network disconnected or service wrapper crashed for example, the crucial messages may not be able to transferred correctly. In this case, this method need to be called, or the obsolete links will stay in proxy which may cause lags or exceptions while processing events.</para></remarks></member><member name="M:SecretNest.RemoteAgency.BeforeMessageProcessingEventArgs`2.Serialize">
  
<summary>
            Serializes this message using the serializer from the Remote Agency instance.
            </summary><returns>Serialized data.</returns></member><member name="P:SecretNest.RemoteAgency.BeforeMessageProcessingEventArgs`2.MessageBodyGeneric">
  
<summary>
            Gets the message body.
            </summary></member><member name="P:SecretNest.RemoteAgency.MessageBodyEventArgs.MessageBodyGeneric">
  
<summary>
            Gets the message body.
            </summary></member><member name="M:SecretNest.RemoteAgency.MessageBodyEventArgs`2.Serialize">
  
<summary>
            Serializes this message using the serializer from the Remote Agency instance.
            </summary><returns>Serialized data.</returns></member><member name="P:SecretNest.RemoteAgency.Attributes.AssetOneWayOperatingAttribute.IsOneWay">
  
<summary>
            Gets whether the operating is one-way.
            </summary></member><member name="M:SecretNest.RemoteAgency.AccessingTimeOutException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
  
<summary>When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.</summary><param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param><param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param><exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (<see langword="Nothing" /> in Visual Basic).</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception></member><member name="M:SecretNest.RemoteAgency.AssetNotFoundException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
  
<summary>When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.</summary><param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param><param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param><exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (<see langword="Nothing" /> in Visual Basic).</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception></member><member name="P:SecretNest.RemoteAgency.IgnoredAssetException.Message">
  
<summary>Gets a message that describes the current exception.</summary><returns>The error message that explains the reason for the exception, or an empty string ("").</returns></member><member name="M:SecretNest.RemoteAgency.InstanceNotFoundException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
  
<summary>When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.</summary><param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param><param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param><exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (<see langword="Nothing" /> in Visual Basic).</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception></member><member name="M:SecretNest.RemoteAgency.InstanceNotFoundException.ToString">
  
<summary>Creates and returns a string representation of the current exception.</summary><returns>A string representation of the current exception.</returns></member><member name="M:SecretNest.RemoteAgency.MessageProcessTerminatedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
  
<summary>When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.</summary><param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param><param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param><exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (<see langword="Nothing" /> in Visual Basic).</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception></member></members>
</doc>