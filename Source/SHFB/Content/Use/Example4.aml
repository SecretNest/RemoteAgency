<?xml version="1.0" encoding="utf-8"?>
<topic id="fbcae2ec-4424-4fbb-82bb-0459c841eec5" revisionNumber="1">
  <developerWalkthroughDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <introduction>
      <para>Remote Agency support the generic interfaces and methods.</para>
    </introduction>

    <procedure>
      <title>Generic method</title>
      <steps class="ordered">
        <step>
          <content>
            <para>Define a service contract interface and the entity class used.</para>
            <para>[DataContract] and [DataMember] are added because Data Contract Serializer is chosen in this example.</para>
            <code language="c#">
using System.Runtime.Serialization;

[DataContract]
public class Parameter&lt;TParameter&gt;
{
  [DataMember] public TParameter MyValue { get; set; }
}

public interface IHello&lt;TInterface&gt;
{
  TInterface NormalMethod(TInterface value1);

  TMethod GenericMethod&lt;TMethod, TParameter&gt;(TInterface value1, TMethod value2, Parameter&lt;TParameter&gt; value3);
}
            </code>
          </content>
        </step>
        <step>
          <content>
            <para>Create the service class.</para>
            <code language="c#">
class Hello : IHello&lt;int&gt;
{
  public int NormalMethod(int value1)
  {
    return value1++;
  }

  public TMethod GenericMethod&lt;TMethod, TParameter&gt;(int value1, TMethod value2, Parameter&lt;TParameter&gt; value3)
  {
    Console.WriteLine(&quot;TMethod: &quot; + typeof(TMethod).Name);
    Console.WriteLine(&quot;TParameter: &quot; + typeof(TParameter).Name);
    Console.WriteLine(&quot;value1: &quot; + value1.ToString());
    Console.WriteLine(&quot;value2: &quot; + value2.ToString());
    Console.WriteLine(&quot;value3.MyValue: &quot; + value3.MyValue.ToString());
    return value2;
  }
}
            </code>
          </content>
        </step>
        <step>
          <content>
            <para>In Main method, define the service object, create a service wrapper and put it into server site.</para>
            <code language="c#">
Hello serviceObject = new Hello();
//Because we are using easy encapsulation, all creators, serializing helpers, packing helpers and entity code builders are encapsulated into just one call.
serverSite.AddServiceWrapper&lt;IHello&lt;int&gt;&gt;(serviceObject, out Guid serviceWrapperInstanceId);
            </code>
          </content>
        </step>
        <step>
          <content>
            <para>In Main method, create a proxy object and put it into client site.</para>
            <code language="c#">
IHello&lt;int&gt; proxy = clientSite.AddProxy&lt;IHello&lt;int&gt;&gt;(serviceWrapperInstanceId, out _);
            </code>
          </content>
        </step>
        <step>
          <content>
            <para>In Main method, call the method of proxy.</para>
            <code language="c#">
int value1 = 100;
int result1 = proxy.NormalMethod(value1);
if (result1 == 101)
  Console.WriteLine(&quot;NormalMethod: Pass.&quot;);

string value2 = &quot;TestString&quot;;
Parameter&lt;long&gt; parameter = new Parameter&lt;long&gt;() { MyValue = 1000 };
string result2 = proxy.GenericMethod(value1, value2, parameter);
if (result2 == &quot;TestString&quot;)
  Console.WriteLine(&quot;GenericMethod: Pass.&quot;);
            </code>
          </content>
        </step>
      </steps>
    </procedure>

    <section>
      <title>Source code package</title>
      <content>
        <para>
          All examples can code can be fetched on <externalLink>
            <linkText>Github</linkText>
            <linkUri>https://github.com/SecretNest/RemoteAgency</linkUri>
          </externalLink>.
        </para>
        <para>
          Code file of this example: <externalLink>
            <linkText>Github C#</linkText>
            <linkUri>https://github.com/SecretNest/RemoteAgency/blob/master/Examples/CSharpExample/Example%204/Program.cs</linkUri>
          </externalLink>
        </para>
      </content>
    </section>

    <relatedTopics>
      <link xlink:href="c84610d8-63f7-48b7-aa35-3a66c03859a1"/>
    </relatedTopics>
  </developerWalkthroughDocument>
</topic>
