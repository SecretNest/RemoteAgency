<?xml version="1.0" encoding="utf-8"?>
<topic id="ecc78678-d7a8-41b7-94ce-8743add59236" revisionNumber="1">
  <developerWalkthroughDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <introduction>
      <para>Remote Agency is built for making the communicating among components in different computers easier.</para>
      <para>Remote Agency can create proxy objects based on one interface file which should be implemented by a remote class, and serializing the accessing between the proxy and the real service object.</para>
      <para>This tutorial will help you to understand the structure of Remote Agency and how to use it in your own code.</para>
    </introduction>

    <section>
      <title>Package structure</title>
      <content>
        <para>To use Remote Agency, you need to add package SecretNest.RemoteAgency from NuGet to your project. This library includes the proxy and service wrapper creating code and the management functions for created objects.</para>
        <para>Also, you need a derived solution for serializing support. You can get a finished product, like SecretNest.RemoteAgency.DataContractSerializer, or make your own one.</para>
        <para>You may find a encapsulated solution, like SecretNest.RemoteAgency.DataContractSerializer.EasyEncapsulataion, which embedded Remote Agency and a serializer. It's a good choice for make your code easy and clean.</para>
      </content>
    </section>

    <section>
      <title>Concept</title>
      <content>
        <list class="bullet">
          <listItem>
            <para>Site</para>
            <para>A site is a collection of functional objects. In a generic solution, every instance of an executable program can be a site. Usually, in a C/S module, we can treat every client and server program as a site.</para>
          </listItem>
          <listItem>
            <para>Service Contract Interface</para>
            <para>An interface which contains the operations which are exposed by the service object to the outside.</para>
          </listItem>
          <listItem>
            <para>Proxy</para>
            <para>For example, when your code call a method in a real object, you need to write down the method name. Now because the real object is far away from your site, it's not possible to call it directly.</para>
            <para>A proxy object generated by Remote Agency based on the service contract interface helps your code accessing and implement the remote calling.</para>
          </listItem>
          <listItem>
            <para>Service Wrapper</para>
            <para>A wrapper object that wrap your real service object, in order to replay the calling from the proxy.</para>
          </listItem>
          <listItem>
            <para>Remote Agency Manager</para>
            <para>A manager of created proxy and service wrapper objects, handling the message packing.</para>
          </listItem>
          <listItem>
            <para>Asset</para>
            <para>In Remote Agency, asset means each method, event and property in a service contract interface.</para>
          </listItem>
          <listItem>
            <para>Entity</para>
            <para>In Remote Agency, entity means the object of entity class contains parameters, return and some special request commands.</para>
          </listItem>
          <listItem>
            <para>Message</para>
            <para>In Remote Agency, message means a packed datagram that should be transport from a site to another.</para>
          </listItem>
          <listItem>
            <para>Transport</para>
            <para>In Remote Agency, transport means to deliver messages among manager objects belongs to all sites.</para>
          </listItem>
          <listItem>
            <para>Generic Types</para>
            <para>When using Remote Agency, you will facing several generic types.</para>
            <list class="nobullet">
              <listItem>
                <para>TNetworkMessage: Type of the message for transporting. In Data Contract Serializer, this is string (in json format).</para>
              </listItem>
              <listItem>
                <para>TSerialized: Type of the serialized data. In Data Contract Serializer, this is string.</para>
              </listItem>
              <listItem>
                <para>TEntityBase: Type of the parent class of all entities. In Data Contract Serializer, this is object.</para>
              </listItem>
              <listItem>
                <para>TInterfaceContract: Type of the service contract interface.</para>
              </listItem>
              <listItem>
                <para>TServiceObject: Type of the class of the service object.</para>
              </listItem>
            </list>
          </listItem>
        </list>
      </content>
    </section>

    <section>
      <title>Start to use</title>
      <content>
        <para>It's simple.</para>
        <para>First, you need to create an instance of Remote Agency Manager or it's derived for each site.</para>
        <para>Then, handle the <codeEntityReference>E:SecretNest.RemoteAgency.RemoteAgencyManager`3.MessageForSendingPrepared</codeEntityReference> to make them connected.</para>
        <para>Third, create objects of proxy and service wrapper, and put them into the manager of their site.</para>
        <para>Now, you can use the proxy as the original way to access the server side object.</para>
        <para>Remove objects from manager when not used any more. Don't forget to disposing the objects when necessary, if you create them by creator own.</para>
      </content>
    </section>

    <section>
      <title>Remote Agency Manager</title>
      <content>
        <para>Let's check some key points of Remote Agency Manager.</para>
        <para>Site id: Every manager instance has a site id in Guid format, which is used to identify the instance. If this is not specified while constructing, a randomized value will be used.</para>
        <para>Context id: An id of the IO context. Every time the IO status changed, the context id will be changed also. You can change it manually by using <codeEntityReference>M:SecretNest.RemoteAgency.RemoteAgencyManager`3.ResetContextId(System.Guid)</codeEntityReference> or <codeEntityReference>M:SecretNest.RemoteAgency.RemoteAgencyManager`3.ResetContextId</codeEntityReference>.</para>
        <para>IO related members: Please refer to <link xlink:href="ae682acd-f05a-4470-a25a-9c19ce4e4d16"/>.</para>
        <para>Adding and removing proxy and service wrapper objects: Please refer to <link xlink:href="450e3fa8-d346-49eb-97e6-1a787ddaf694"/>.</para>
        <para>Target site management: Please refer to Please refer to <link xlink:href="3484da6c-de69-4562-8f77-0d2c92b273b6"/>.</para>
        <para>Dealing with the proxy objects with disposing required: Please refer to <link xlink:href="5c397505-efd8-429a-9ebf-d163295cebbb"/>.</para>
        <para>Exception redirect: Please refer to <link xlink:href="626ce0a5-b968-4dab-b5dd-0c73b3c0a5c6"/>.</para>
      </content>
    </section>

    <relatedTopics>
      <link xlink:href="c84610d8-63f7-48b7-aa35-3a66c03859a1"/>
    </relatedTopics>
  </developerWalkthroughDocument>
</topic>
