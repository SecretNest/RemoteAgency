<?xml version="1.0" encoding="utf-8"?>
<topic id="94ec2756-b127-468a-8c6f-ce18bbefbafb" revisionNumber="1">
  <developerWalkthroughDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <introduction>
      <para>Let's refine the event support.</para>
      <list class="bullet">
        <listItem>
          <para>While raising a standard event, the first parameter should be the object of caller itself. But it may not be serialized to another site. Let's make a compromised way: keep the coding standard, but not transfer it through Remote Agency.</para>
          <para>Simply, mark the event with <codeEntityReference>T:SecretNest.RemoteAgency.Attributes.EventParameterIgnoredAttribute</codeEntityReference>. Or, you can mark the parameter in delegate with <codeEntityReference>T:SecretNest.RemoteAgency.Attributes.ParameterIgnoredAttribute</codeEntityReference>. <codeEntityReference>T:SecretNest.RemoteAgency.Attributes.ParameterIgnoredAttribute</codeEntityReference> can also be support in method calling.</para>
        </listItem>
        <listItem>
          <para>A non-standardized event could have different parameters and return. Remote Agency can support it also.</para>
        </listItem>
      </list>
      <para>There are something else not covered in this example:</para>
      <list class="bullet">
        <listItem>
          <para>Two way property is also supported. If you can define it in delegate, <codeEntityReference>T:SecretNest.RemoteAgency.Attributes.ParameterTwoWayPropertyAttribute</codeEntityReference> in <link xlink:href="9c0126a8-a683-4903-86f0-d7737e2ba575">Example 3</link> is a good way. Or, you can also use <codeEntityReference>T:SecretNest.RemoteAgency.Attributes.EventParameterTwoWayPropertyAttribute</codeEntityReference> at event definition.</para>
        </listItem>
        <listItem>
          <para>To optimized the event subscribing speed, you may want to check the <codeEntityReference>T:SecretNest.RemoteAgency.Attributes.EventSubscritionMode</codeEntityReference>.</para>
        </listItem>
      </list>
    </introduction>

    <procedure>
      <title>Event</title>
      <steps class="ordered">
        <step>
          <content>
            <para>Define a service contract interface and the delegate.</para>
            <code language="c#">
public delegate string MyTestHandler(string value);

public interface IHello
{
  [EventParameterIgnored(&quot;sender&quot;)]
  event EventHandler WorldOpened;

  event MyTestHandler MyTestEvent;
  void HelloWorld();
}
            </code>
          </content>
        </step>
        <step>
          <content>
            <para>Create the service class.</para>
            <code language="c#">
class Hello : IHello
{
  public event EventHandler WorldOpened;
  public event MyTestHandler MyTestEvent;

  public void HelloWorld()
  {
    WorldOpened?.Invoke(this, EventArgs.Empty);

    string value = MyTestEvent?.Invoke(&quot;Request&quot;);
    if (value == &quot;Response&quot;)
      Console.WriteLine(&quot;Pass.&quot;);
  }
}
            </code>
          </content>
        </step>
        <step>
          <content>
            <para>In Main method, define the service object, create a service wrapper and put it into server site.</para>
            <code language="c#">
Hello serviceObject = new Hello();
//Because we are using easy encapsulation, all creators, serializing helpers, packing helpers and entity code builders are encapsulated into just one call.
serverSite.AddServiceWrapper&lt;IHello&gt;(serviceObject, out Guid serviceWrapperInstanceId);
            </code>
          </content>
        </step>
        <step>
          <content>
            <para>Add methods for handling events for client.</para>
            <code language="c#">
private static void Proxy_WorldOpened(object sender, EventArgs e)
{
  Console.WriteLine(&quot;Hello World!&quot;);
}

private static string Proxy_MyTestEvent(string value)
{
  if (value == &quot;Request&quot;)
    return &quot;Response&quot;;
  else
    return &quot;Unknown&quot;;
}
            </code>
          </content>
        </step>
        <step>
          <content>
            <para>In Main method, create a proxy object, put it into client site, and add the handler of the event.</para>
            <code language="c#">
IHello proxy = clientSite.AddProxy&lt;IHello&gt;(serviceWrapperInstanceId, out _);
proxy.WorldOpened += Proxy_WorldOpened;
proxy.MyTestEvent += Proxy_MyTestEvent;
            </code>
          </content>
        </step>
        <step>
          <content>
            <para>In Main method, call the method of proxy.</para>
            <code language="c#">
proxy.HelloWorld();
            </code>
          </content>
        </step>
        <step>
          <content>
            <para>Dispose objects after testing.</para>
            <code language="c#">
clientSite.RemoveManagingObject(proxyInstanceId, true);
serverSite.RemoveManagingObject(serviceWrapperInstanceId, true);
            </code>
          </content>
        </step>
      </steps>
    </procedure>

    <section>
      <title>Source code package</title>
      <content>
        <para>
          All examples can code can be fetched on <externalLink>
            <linkText>Github</linkText>
            <linkUri>https://github.com/scegg/RemoteAgency</linkUri>
          </externalLink>.
        </para>
        <para>
          Code file of this example: <externalLink>
            <linkText>Github C#</linkText>
            <linkUri>https://github.com/scegg/RemoteAgency/blob/master/Examples/CSharpExample/Example%208/Program.cs</linkUri>
          </externalLink>
        </para>
      </content>
    </section>

    <relatedTopics>
      <link xlink:href="c84610d8-63f7-48b7-aa35-3a66c03859a1"/>
    </relatedTopics>
  </developerWalkthroughDocument>
</topic>
