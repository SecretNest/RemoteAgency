<?xml version="1.0" encoding="utf-8"?>
<topic id="222b9528-0832-45f0-9eff-b6fc496212cb" revisionNumber="1">
  <developerWalkthroughDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <introduction>
      <para>Full functional method calling.</para>
    </introduction>

    <procedure>
      <title>Method with parameter, ref, out and return.</title>
      <steps class="ordered">
        <step>
          <content>
            <para>Define a service contract interface and the entity class used.</para>
            <para>[DataContract] and [DataMember] are added because Data Contract Serializer is chosen in this example.</para>
            <code language="c#">
using System.Runtime.Serialization;   

[DataContract]
public class Parameter
{
  [DataMember] public string MyValue { get; set; }
}

public interface IHello
{
  string NormalMethod(Parameter parameter, ref string refParameter, out int outParameter, params string[] extra);
}
            </code>
          </content>
        </step>
        <step>
          <content>
            <para>Create the service class.</para>
            <code language="c#">
class Hello : IHello
{
  public string NormalMethod(Parameter parameter, ref string refParameter, out int outParameter, params string[] extra)
  {
    refParameter += "Changed";
    outParameter = 100;
    if (extra != null)
      foreach (var item in extra)
        Console.WriteLine(item);
    return parameter.MyValue;
  }
}
            </code>
          </content>
        </step>
        <step>
          <content>
            <para>In Main method, define the service object, create a service wrapper and put it into server site.</para>
            <code language="c#">
Hello serviceObject = new Hello();
//Because we are using easy encapsulation, all creators, serializing helpers, packing helpers and entity code builders are encapsulated into just one call.
serverSite.AddServiceWrapper&lt;IHello&gt;(serviceObject, out Guid serviceWrapperInstanceId);
            </code>
          </content>
        </step>
        <step>
          <content>
            <para>In Main method, create a proxy object and put it into client site.</para>
            <code language="c#">
IHello proxy = clientSite.AddProxy&lt;IHello&gt;(serviceWrapperInstanceId, out _);
            </code>
          </content>
        </step>
        <step>
          <content>
            <para>In Main method, call the method of proxy.</para>
            <code language="c#">
Parameter parameter = new Parameter() { MyValue = &quot;ParameterValue&quot; };
string refParameter = &quot;RefValue&quot;;
var result = proxy.NormalMethod(parameter, ref refParameter, out int outParameter, &quot;extra1&quot;, &quot;extra2&quot;);
if (result == &quot;ParameterValue&quot; &amp;&amp; refParameter == &quot;RefValueChanged&quot; &amp;&amp; outParameter == 100)
  Console.WriteLine(&quot;Pass.&quot;);
            </code>
          </content>
        </step>
      </steps>
    </procedure>

    <section>
      <title>Source code package</title>
      <content>
        <para>
          All examples can code can be fetched on <externalLink>
            <linkText>Github</linkText>
            <linkUri>https://github.com/scegg/RemoteAgency</linkUri>
          </externalLink>.
        </para>
        <para>
          Code file of this example: <externalLink>
            <linkText>Github C#</linkText>
            <linkUri>https://github.com/scegg/RemoteAgency/blob/master/Examples/CSharpExample/Example%202/Program.cs</linkUri>
          </externalLink>
        </para>
      </content>
    </section>

    <relatedTopics>
      <link xlink:href="c84610d8-63f7-48b7-aa35-3a66c03859a1"/>
    </relatedTopics>
  </developerWalkthroughDocument>
</topic>
