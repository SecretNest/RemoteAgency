<?xml version="1.0" encoding="utf-8"?>
<topic id="28b771ff-e4f5-4350-9339-200b2ba02f86" revisionNumber="1">
  <developerWhitePaperDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <introduction>
      <para>Message Filtering and Metadata.</para>
    </introduction>

    <procedure>
      <title>Property</title>
      <steps class="ordered">
        <step>
          <content>
            <para>Define a service contract interface.</para>
            <code language="c#">
public interface IMetadataTest
{
  void PrintMetadata();
}
            </code>
          </content>
        </step>
        <step>
          <content>
            <para>Create the service class.</para>
            <code language="c#">
class MetadataTest : IMetadataTest
{
  public void PrintMetadata()
  {
    Console.WriteLine("\nMetadata printing from server:\n" + MessageInstanceMetadataService.CurrentMessageInstanceMetadata);
  }
}
            </code>
            <para>When PrintMetadata executing, <codeEntityReference qualifyHint="false">P:SecretNest.RemoteAgency.MessageInstanceMetadataService.CurrentMessageInstanceMetadata</codeEntityReference> contains the metadata of this instance of message. See <codeEntityReference qualifyHint="false">T:SecretNest.RemoteAgency.MessageInstanceMetadata</codeEntityReference> for details.</para>            
          </content>
        </step>
        <step>
          <content>
            <para>Adding methods for dealing events.</para>
            <code>
private static void ClientSite_AfterMessageReceived(object sender, BeforeMessageProcessingEventArgsBase&lt;string&gt; e)
{
  WriteEventArgs("ClientSite_AfterMessageReceived", e);
}

private static void ClientSite_BeforeMessageSending(object sender, BeforeMessageProcessingEventArgsBase&lt;string&gt; e)
{
  WriteEventArgs("ClientSite_BeforeMessageSending", e);
}

private static void ServerSite_AfterMessageReceived(object sender, BeforeMessageProcessingEventArgsBase&lt;string&gt; e)
{
  //e.FurtherProcessing = MessageFurtherProcessing.TerminateWithExceptionReturned;
  WriteEventArgs("ServerSite_AfterMessageReceived", e);
}

private static void ServerSite_BeforeMessageSending(object sender, BeforeMessageProcessingEventArgsBase&lt;string&gt; e)
{
  //e.FurtherProcessing = MessageFurtherProcessing.ReplacedWithException;
  WriteEventArgs("ServerSite_BeforeMessageSending", e);
}

private static void WriteEventArgs(string eventName, BeforeMessageProcessingEventArgsBase&lt;string&gt; e)
{
  Console.WriteLine(string.Format("\n{0}:\n{1}\nFurther Processing: {2}\nMessage: {3}", eventName, e.MessageInstanceMetadata, e.FurtherProcessing, e.SerializedMessage));
  if (e.IsException)
  {
    Console.WriteLine("Exception Type: " + (e as BeforeExceptionMessageProcessingEventArgs&lt;string&gt;).ExceptionType.Name);
  }
  else
  {
    var arg = e as BeforeMessageProcessingEventArgs&lt;string&gt;;
    if (arg.GenericArguments != null &amp;&amp; arg.GenericArguments.Length > 0)
    {
      Console.WriteLine("Generic Arguments: " + string.Join(", ", Array.ConvertAll(arg.GenericArguments, i => i.Name)));
    }
  }
}
            </code>
            <para>See <see cref="T:SecretNest.RemoteAgency.BeforeMessageProcessingEventArgsBase`1" />, <see cref="T:SecretNest.RemoteAgency.BeforeMessageProcessingEventArgs`1" /> and <see cref="T:SecretNest.RemoteAgency.BeforeExceptionMessageProcessingEventArgs`1" /> for details.</para>
          </content>
        </step>
        <step>
          <content>
            <para>In Main method, link those methods to events.</para>
            <code>
clientSite.AfterMessageReceived += ClientSite_AfterMessageReceived;
clientSite.BeforeMessageSending += ClientSite_BeforeMessageSending;
serverSite.AfterMessageReceived += ServerSite_AfterMessageReceived;
serverSite.BeforeMessageSending += ServerSite_BeforeMessageSending;
            </code>
          </content>
        </step>
        <step>
          <content>
            <para>In Main method, define the service object, create a service wrapper and put it into server site.</para>
            <code language="c#">
MetadataTest serviceObject = new MetadataTest();
//Because we are using easy encapsulation, all creators, serializing helpers, packing helpers and entity code builders are encapsulated into just one call.
serverSite.AddServiceWrapper&lt;IMetadataTest&gt;(serviceObject, out Guid serviceWrapperInstanceId);
            </code>
          </content>
        </step>
        <step>
          <content>
            <para>In Main method, create a proxy object and put it into client site.</para>
            <code language="c#">
IMetadataTest proxy = clientSite.AddProxy&lt;IMetadataTest&gt;(serviceWrapperInstanceId, out _);
            </code>
          </content>
        </step>
        <step>
          <content>
            <para>In Main method, call the method of proxy.</para>
            <code language="c#">
proxy.PrintMetadata();
            </code>
          </content>
        </step>
        <step>
          <content>
            <para>You could uncomment code related to FurtherProcessing for filtering messages.</para>
          </content>
        </step>
      </steps>
    </procedure>

    <section>
      <title>Source code package</title>
      <content>
        <para>
          All examples can code can be fetched on <externalLink>
            <linkText>Github</linkText>
            <linkUri>https://github.com/SecretNest/RemoteAgency</linkUri>
          </externalLink>.
        </para>
        <para>
          Code file of this example: <externalLink>
            <linkText>Github C#</linkText>
            <linkUri>https://github.com/SecretNest/RemoteAgency/blob/master/Examples/CSharpExample/Example%2010/Program.cs</linkUri>
          </externalLink>
        </para>
      </content>
    </section>

    <relatedTopics>
      <link xlink:href="c77e5e89-994c-42ee-86ab-addcd4d5ed46"/>
      <link xlink:href="09cf7238-2b9d-4aff-afaf-949c7734f607"/>
      <link xlink:href="c84610d8-63f7-48b7-aa35-3a66c03859a1"/>
    </relatedTopics>
    
  </developerWhitePaperDocument>
</topic>
