<?xml version="1.0" encoding="utf-8"?>
<topic id="9c0126a8-a683-4903-86f0-d7737e2ba575" revisionNumber="1">
  <developerWalkthroughDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <introduction>
      <para>Sometimes, we need the target side to provide some value to some property of a parameter. When using this designing in a serialized calling solution, we need to specified the requirement by using <codeEntityReference>T:SecretNest.RemoteAgency.Attributes.ParameterTwoWayPropertyAttribute</codeEntityReference> let the Remote Agency send the property back to the caller side.</para>
      <para>Many serialization solution, like WCF, won't support method overloads. One reason is methods with same name will leading to duplicated names of parameter entity, result entity and message. In Remote Agency, this is supported, but you need to specified another asset name by using <codeEntityReference>T:SecretNest.RemoteAgency.Attributes.CustomizedAssetNameAttribute</codeEntityReference>.</para>
    </introduction>

    <procedure>
      <title>Method with two way property and overload.</title>
      <steps class="ordered">
        <step>
          <content>
            <para>Define a service contract interface and the entity class used.</para>
            <para>[DataContract] and [DataMember] are added because Data Contract Serializer is chosen in this example.</para>
            <code language="c#">
using System.Runtime.Serialization;
using SecretNest.RemoteAgency.Attributes;

[DataContract]
public class Parameter
{
  [DataMember] public string MyValue { get; set; }
}

public interface IHello
{
  string NormalMethod(Parameter parameter, ref string refParameter, out int outParameter);
  [CustomizedAssetName("TwoWayMethod")]
  void NormalMethod([ParameterTwoWayProperty("MyValue")] Parameter parameter, string newValue);
}
            </code>
          </content>
        </step>
        <step>
          <content>
            <para>Create the service class.</para>
            <code language="c#">
class Hello : IHello
{
  public string NormalMethod(Parameter parameter, ref string refParameter, out int outParameter)
  {
    refParameter += &quot;Changed&quot;;
    outParameter = 100;
    return parameter.MyValue;
  }

  public void NormalMethod(Parameter parameter, string newValue)
  {
    parameter.MyValue = newValue;
  }
}
            </code>
          </content>
        </step>
        <step>
          <content>
            <para>In Main method, define the service object, create a service wrapper and put it into server site.</para>
            <code language="c#">
Hello serviceObject = new Hello();
//Because we are using easy encapsulation, all creators, serializing helpers, packing helpers and entity code builders are encapsulated into just one call.
serverSite.AddServiceWrapper&lt;IHello&gt;(serviceObject, out Guid serviceWrapperInstanceId);
            </code>
          </content>
        </step>
        <step>
          <content>
            <para>In Main method, create a proxy object and put it into client site.</para>
            <code language="c#">
IHello proxy = clientSite.AddProxy&lt;IHello&gt;(serviceWrapperInstanceId, out _);
            </code>
          </content>
        </step>
        <step>
          <content>
            <para>In Main method, call the method of proxy.</para>
            <code language="c#">
Parameter parameter = new Parameter() { MyValue = &quot;ParameterValue&quot; };
string refParameter = &quot;RefValue&quot;;
var result = proxy.NormalMethod(parameter, ref refParameter, out int outParameter);
if (result == &quot;ParameterValue&quot; &amp;&amp; refParameter == &quot;RefValueChanged&quot; &amp;&amp; outParameter == 100)
  Console.WriteLine(&quot;NormalMethod In Example 2: Pass.&quot;);

proxy.NormalMethod(parameter, &quot;NewValue&quot;);
if (parameter.MyValue == &quot;NewValue&quot;)
  Console.WriteLine(&quot;NormalMethod TwoWay: Pass.&quot;);
            </code>
          </content>
        </step>
      </steps>
    </procedure>

    <section>
      <title>Used Attributes</title>
      <content>
        <list class="nobullet">
          <listItem>
            <para>CustomizedAssetName</para>
            <para>Normally, Remote Agency use the name of the asset (method, event, property) as the asset name. Asset name is used in message, as well as name of parameter and return entity class.</para>
            <para>You can always specify another name using <codeEntityReference>T:SecretNest.RemoteAgency.Attributes.ParameterTwoWayPropertyAttribute</codeEntityReference>. While using this, make sure the asset names are not clashed with each other, including the names specified default.</para>
            <para>This attribute can be used on methods, events and properties.</para>
          </listItem>
          <listItem>
            <para>ParameterTwoWayProperty</para>
            <para>Use <codeEntityReference>T:SecretNest.RemoteAgency.Attributes.ParameterTwoWayPropertyAttribute</codeEntityReference> when the caller side need some property to be transferred back.</para>
            <para>ParameterTwoWayProperty has two constructor.</para>
            <list class="bullet">
              <listItem>
                <para>If the parameter is simple, not an array or enumerable, and the whole property is required to be transferred back, use the constructor with only property name specified. Entity property name is optional, a default name will be generated if absents.</para>
              </listItem>
              <listItem>
                <para>If the parameter is an array or enumerable, or you need to specified some sub-property, or from one value of some indexed-based property, use the constructor with path, type and entity property name.</para>
                <para>Path is the code in C# for accessing the exactly node you required, starting with dot or the index of the parameter, e.g. ".MyValues[5]", ".Entity.Title", "[100].Name", etc.</para>
                <para>Type is the data type of the node you pointed to.</para>
                <para>Entity property name is required. This name will be used as a property name in the return entity class.</para>
              </listItem>
            </list>
            <para>This attributes can be used on parameter of methods and the delegate for events.</para>
            <para>You can also use <codeEntityReference>T:SecretNest.RemoteAgency.Attributes.EventParameterTwoWayPropertyAttribute</codeEntityReference> on events which has the similar functions and higher priority than defined in delegate. A parameter name is required while using EventParameterTwoWayPropertyAttribute.</para>
          </listItem>
        </list>
      </content>
    </section>

    <section>
      <title>Source code package</title>
      <content>
        <para>
          All examples can code can be fetched on <externalLink>
            <linkText>Github</linkText>
            <linkUri>https://github.com/SecretNest/RemoteAgency</linkUri>
          </externalLink>.
        </para>
        <para>
          Code file of this example: <externalLink>
            <linkText>Github C#</linkText>
            <linkUri>https://github.com/SecretNest/RemoteAgency/blob/master/Examples/CSharpExample/Example%203/Program.cs</linkUri>
          </externalLink>
        </para>
      </content>
    </section>

    <relatedTopics>
      <link xlink:href="c84610d8-63f7-48b7-aa35-3a66c03859a1"/>
    </relatedTopics>
  </developerWalkthroughDocument>
</topic>
