<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SecretNest.RemoteAgency.Neat</name>
    </assembly>
    <members>
        <member name="T:SecretNest.RemoteAgency.AssemblyBuilding.BeforeAssemblyCreatedEventArgs">
            <summary>
            Represents an argument of the <see cref="E:SecretNest.RemoteAgency.RemoteAgencyBase.BeforeAssemblyCreated"/>.
            </summary>
        </member>
        <member name="P:SecretNest.RemoteAgency.AssemblyBuilding.BeforeAssemblyCreatedEventArgs.SourceInterface">
            <summary>
            Gets the type of source interface.
            </summary>
        </member>
        <member name="P:SecretNest.RemoteAgency.AssemblyBuilding.BeforeAssemblyCreatedEventArgs.AssemblyBuilder">
            <summary>
            Gets the builder for building assembly.
            </summary>
        </member>
        <member name="P:SecretNest.RemoteAgency.AssemblyBuilding.BeforeAssemblyCreatedEventArgs.ModuleBuilder">
            <summary>
            Gets the builder for building module.
            </summary>
        </member>
        <member name="P:SecretNest.RemoteAgency.AssemblyBuilding.BeforeAssemblyCreatedEventArgs.BuiltProxy">
            <summary>
            Gets the type of built proxy. When proxy is not built, the value is <see langword="null"/>.
            </summary>
        </member>
        <member name="P:SecretNest.RemoteAgency.AssemblyBuilding.BeforeAssemblyCreatedEventArgs.BuiltServiceWrapper">
            <summary>
            Gets the type of built service wrapper. When service wrapper is not built, the value is <see langword="null"/>.
            </summary>
        </member>
        <member name="P:SecretNest.RemoteAgency.AssemblyBuilding.BeforeAssemblyCreatedEventArgs.BuiltEntities">
            <summary>
            Gets the types of built entities.
            </summary>
        </member>
        <member name="M:SecretNest.RemoteAgency.AssemblyBuilding.BeforeAssemblyCreatedEventArgs.#ctor(System.Reflection.Emit.AssemblyBuilder,System.Reflection.Emit.ModuleBuilder,System.Type,System.Type,System.Type,System.Collections.Generic.IReadOnlyList{System.Type})">
            <summary>
            Initialize an instance of BeforeAssemblyCreatedEventArgs.
            </summary>
            <param name="assemblyBuilder">Builder for building assembly.</param>
            <param name="moduleBuilder">Builder for building module.</param>
            <param name="sourceInterface">Type of source interface.</param>
            <param name="builtProxy">Type of built proxy</param>
            <param name="builtServiceWrapper">Type of built service wrapper.</param>
            <param name="builtEntities">Types of built entities.</param>
        </member>
        <member name="T:SecretNest.RemoteAgency.AssemblyBuilding.BeforeTypeCreatedEventArgs">
            <summary>
            Represents an argument of the <see cref="E:SecretNest.RemoteAgency.RemoteAgencyBase.BeforeTypeCreated"/>.
            </summary>
        </member>
        <member name="P:SecretNest.RemoteAgency.AssemblyBuilding.BeforeTypeCreatedEventArgs.SourceInterface">
            <summary>
            Gets the type of source interface.
            </summary>
        </member>
        <member name="P:SecretNest.RemoteAgency.AssemblyBuilding.BeforeTypeCreatedEventArgs.TypeBuilder">
            <summary>
            Gets the builder for building type.
            </summary>
        </member>
        <member name="P:SecretNest.RemoteAgency.AssemblyBuilding.BeforeTypeCreatedEventArgs.BuiltClassType">
            <summary>
            Gets the type of the class to be built, proxy or service wrapper.
            </summary>
        </member>
        <member name="M:SecretNest.RemoteAgency.AssemblyBuilding.BeforeTypeCreatedEventArgs.#ctor(System.Reflection.Emit.TypeBuilder,System.Type,SecretNest.RemoteAgency.AssemblyBuilding.BuiltClassType)">
            <summary>
            Initialize an instance of BeforeTypeCreatedEventArgs.
            </summary>
            <param name="typeBuilder">Builder for building type.</param>
            <param name="sourceInterface">Type of source interface.</param>
            <param name="builtClassType">Type of the class to be built, proxy or service wrapper.</param>
        </member>
        <member name="T:SecretNest.RemoteAgency.AssemblyBuilding.BuiltClassType">
            <summary>
            Contains a list of the Remote Agency built type. Entity classes are excluded.
            </summary>
        </member>
        <member name="F:SecretNest.RemoteAgency.AssemblyBuilding.BuiltClassType.Proxy">
            <summary>
            Class implemented the interface specified, transferring all accessing from and to the service wrapper.
            </summary>
        </member>
        <member name="F:SecretNest.RemoteAgency.AssemblyBuilding.BuiltClassType.ServiceWrapper">
            <summary>
            Class working with proxy to forward accessing from and to the real service object.
            </summary>
        </member>
        <member name="T:SecretNest.RemoteAgency.AssemblyBuilding.AfterTypeAndAssemblyBuiltEventArgs">
            <summary>
            Represents an argument of the <see cref="E:SecretNest.RemoteAgency.RemoteAgencyBase.AfterTypeAndAssemblyBuilt"/>.
            </summary>
        </member>
        <member name="P:SecretNest.RemoteAgency.AssemblyBuilding.AfterTypeAndAssemblyBuiltEventArgs.SourceInterface">
            <summary>
            Gets the type of source interface.
            </summary>
        </member>
        <member name="P:SecretNest.RemoteAgency.AssemblyBuilding.AfterTypeAndAssemblyBuiltEventArgs.BuiltProxy">
            <summary>
            Gets the type of built proxy. When proxy is not built, the value is <see langword="null"/>.
            </summary>
        </member>
        <member name="P:SecretNest.RemoteAgency.AssemblyBuilding.AfterTypeAndAssemblyBuiltEventArgs.BuiltServiceWrapper">
            <summary>
            Gets the type of built service wrapper. When service wrapper is not built, the value is <see langword="null"/>.
            </summary>
        </member>
        <member name="P:SecretNest.RemoteAgency.AssemblyBuilding.AfterTypeAndAssemblyBuiltEventArgs.BuiltEntities">
            <summary>
            Gets the types of built entities.
            </summary>
        </member>
        <member name="P:SecretNest.RemoteAgency.AssemblyBuilding.AfterTypeAndAssemblyBuiltEventArgs.Assembly">
            <summary>
            Gets the built assembly.
            </summary>
        </member>
        <member name="M:SecretNest.RemoteAgency.AssemblyBuilding.AfterTypeAndAssemblyBuiltEventArgs.Save(System.String)">
            <summary>
            Saves the built assembly to the file specified.
            </summary>
            <param name="assemblyFileName">File name to be written to.</param>
            <remarks>Assembly saving is not supported by .net core. This method is only for .net framework.</remarks>
            <exception cref="T:System.NotSupportedException">Thrown when called not from .net framework.</exception>
        </member>
        <member name="M:SecretNest.RemoteAgency.AssemblyBuilding.AfterTypeAndAssemblyBuiltEventArgs.#ctor(System.Type,System.Type,System.Type,System.Collections.Generic.IReadOnlyList{System.Type},System.Reflection.Assembly,System.Action{System.String})">
            <summary>
            Initializes an instance of AfterTypeAndAssemblyBuiltEventArgs.
            </summary>
            <param name="sourceInterface">Type of source interface.</param>
            <param name="builtProxy">Type of built proxy</param>
            <param name="builtServiceWrapper">Type of built service wrapper.</param>
            <param name="builtEntities">Types of built entities.</param>
            <param name="assembly">Built assembly.</param>
            <param name="saveFileCallback">Callback for saving assembly to file while <see cref="M:SecretNest.RemoteAgency.AssemblyBuilding.AfterTypeAndAssemblyBuiltEventArgs.Save(System.String)"/> called.</param>
        </member>
        <member name="M:SecretNest.RemoteAgency.AssemblyBuilding.AfterTypeAndAssemblyBuiltEventArgs.Dispose(System.Boolean)">
            <summary>
            Disposes of the resources (other than memory) used by this instance.
            </summary>
            <param name="disposing">True: release both managed and unmanaged resources; False: release only unmanaged resources.</param>
        </member>
        <member name="M:SecretNest.RemoteAgency.AssemblyBuilding.AfterTypeAndAssemblyBuiltEventArgs.Dispose">
            <inheritdoc />
        </member>
        <member name="T:SecretNest.RemoteAgency.CreatedProxy">
            <summary>
            Contains the instance of the created proxy and id of it.
            </summary>
        </member>
        <member name="M:SecretNest.RemoteAgency.CreatedProxy.#ctor(System.Guid,System.Object)">
            <summary>
            Initializes an instance of CreatedProxy.
            </summary>
            <param name="instanceId">Id of the proxy instance.</param>
            <param name="proxy">Proxy created.</param>
        </member>
        <member name="P:SecretNest.RemoteAgency.CreatedProxy.InstanceId">
            <summary>
            Gets the id of the proxy instance.
            </summary>
        </member>
        <member name="P:SecretNest.RemoteAgency.CreatedProxy.Proxy">
            <summary>
            Gets the proxy created.
            </summary>
        </member>
        <member name="T:SecretNest.RemoteAgency.CreatedProxy`1">
            <summary>
            Represents the instance of the created proxy and id of it, created based on the service contract specified by <typeparamref name="TInterface"/>.
            </summary>
            <typeparam name="TInterface">Service contract interface to be implemented by this proxy.</typeparam>
        </member>
        <member name="M:SecretNest.RemoteAgency.CreatedProxy`1.#ctor(System.Guid,`0)">
            <summary>
            Initializes an instance of CreatedProxy.
            </summary>
            <param name="instanceId">Id of the proxy instance.</param>
            <param name="proxy">Proxy created.</param>
        </member>
        <member name="P:SecretNest.RemoteAgency.CreatedProxy`1.ProxyGeneric">
            <summary>
            Gets the proxy created.
            </summary>
        </member>
        <member name="T:SecretNest.RemoteAgency.Inspecting.EntityNameConflictException">
            <summary>
            The exception that is thrown when conflict of entity name is found.
            </summary>
        </member>
        <member name="M:SecretNest.RemoteAgency.Inspecting.EntityNameConflictException.#ctor(System.String,System.Attribute,System.Collections.Generic.Stack{System.Reflection.MemberInfo})">
            <summary>
            Initializes an instance of EntityNameConflictException.
            </summary>
            <param name="message">Exception message.</param>
            <param name="attribute">Attribute that cause this exception.</param>
            <param name="memberPath">Member path.</param>
        </member>
        <member name="M:SecretNest.RemoteAgency.Inspecting.EntityNameConflictException.#ctor(System.String,System.Attribute,System.Reflection.MemberInfo,System.Collections.Generic.Stack{System.Reflection.MemberInfo})">
            <summary>
            Initializes an instance of EntityNameConflictException.
            </summary>
            <param name="message">Exception message.</param>
            <param name="attribute">Attribute that cause this exception.</param>
            <param name="memberInfo">Member where this attribute is marked on.</param>
            <param name="memberParentPath">Parent path.</param>
        </member>
        <member name="M:SecretNest.RemoteAgency.Inspecting.EntityNameConflictException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the EntityNameConflictException class with serialized data.
            </summary>
            <param name="info">The SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:SecretNest.RemoteAgency.Inspecting.AssetNameConflictException">
            <summary>
            The exception that is thrown when conflict of asset name is found.
            </summary>
        </member>
        <member name="M:SecretNest.RemoteAgency.Inspecting.AssetNameConflictException.#ctor(System.String,System.Attribute,System.Collections.Generic.Stack{System.Reflection.MemberInfo})">
            <summary>
            Initializes an instance of AssetNameConflictException.
            </summary>
            <param name="message">Exception message.</param>
            <param name="attribute">Attribute that cause this exception.</param>
            <param name="memberPath">Member path.</param>
        </member>
        <member name="M:SecretNest.RemoteAgency.Inspecting.AssetNameConflictException.#ctor(System.String,System.Attribute,System.Reflection.MemberInfo,System.Collections.Generic.Stack{System.Reflection.MemberInfo})">
            <summary>
            Initializes an instance of AssetNameConflictException.
            </summary>
            <param name="message">Exception message.</param>
            <param name="attribute">Attribute that cause this exception.</param>
            <param name="memberInfo">Member where this attribute is marked on.</param>
            <param name="memberParentPath">Parent path.</param>
        </member>
        <member name="M:SecretNest.RemoteAgency.Inspecting.AssetNameConflictException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the AssetNameConflictException class with serialized data.
            </summary>
            <param name="info">The SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:SecretNest.RemoteAgency.Inspecting.EntityPropertyNameConflictException">
            <summary>
            The exception that is thrown when conflict of property name in entity is found.
            </summary>
        </member>
        <member name="P:SecretNest.RemoteAgency.Inspecting.EntityPropertyNameConflictException.Parameter">
            <summary>
            Gets the parameter which the attribute is on.
            </summary>
            <remarks>Only valid when <see cref="P:SecretNest.RemoteAgency.Inspecting.EntityPropertyNameConflictException.CausedMemberType"/> is set to <see cref="T:SecretNest.RemoteAgency.Inspecting.EntityPropertyNameConflictExceptionCausedMemberType"/>.Parameter.</remarks>
        </member>
        <member name="P:SecretNest.RemoteAgency.Inspecting.EntityPropertyNameConflictException.CausedMemberType">
            <summary>
            Gets the member type where this exception is caused.
            </summary>
        </member>
        <member name="M:SecretNest.RemoteAgency.Inspecting.EntityPropertyNameConflictException.#ctor(System.String,System.Attribute,System.Reflection.ParameterInfo,System.Collections.Generic.Stack{System.Reflection.MemberInfo})">
            <summary>
            Initializes an instance of EntityPropertyNameConflictException.
            </summary>
            <param name="message">Exception message.</param>
            <param name="attribute">Attribute that cause this exception.</param>
            <param name="parameter">Parameter which the attribute is on.</param>
            <param name="memberPath">Member path.</param>
        </member>
        <member name="M:SecretNest.RemoteAgency.Inspecting.EntityPropertyNameConflictException.#ctor(System.String,System.Attribute,System.Reflection.ParameterInfo,System.Reflection.MemberInfo,System.Collections.Generic.Stack{System.Reflection.MemberInfo})">
            <summary>
            Initializes an instance of EntityPropertyNameConflictException.
            </summary>
            <param name="message">Exception message.</param>
            <param name="attribute">Attribute that cause this exception.</param>
            <param name="parameter">Parameter which the attribute is on.</param>
            <param name="memberInfo">Member where this attribute is marked on.</param>
            <param name="memberParentPath">Parent path.</param>
        </member>
        <member name="M:SecretNest.RemoteAgency.Inspecting.EntityPropertyNameConflictException.#ctor(System.String,System.Attribute,SecretNest.RemoteAgency.Inspecting.EntityPropertyNameConflictExceptionCausedMemberType,System.Collections.Generic.Stack{System.Reflection.MemberInfo})">
            <summary>
            Initializes an instance of EntityPropertyNameConflictException.
            </summary>
            <param name="message">Exception message.</param>
            <param name="attribute">Attribute that cause this exception.</param>
            <param name="causedMemberType">Member type where this exception is caused.</param>
            <param name="memberPath">Member path.</param>
        </member>
        <member name="M:SecretNest.RemoteAgency.Inspecting.EntityPropertyNameConflictException.#ctor(System.String,System.Attribute,System.Reflection.MemberInfo,SecretNest.RemoteAgency.Inspecting.EntityPropertyNameConflictExceptionCausedMemberType,System.Collections.Generic.Stack{System.Reflection.MemberInfo})">
            <summary>
            Initializes an instance of EntityPropertyNameConflictException.
            </summary>
            <param name="message">Exception message.</param>
            <param name="attribute">Attribute that cause this exception.</param>
            <param name="memberInfo">Member where this attribute is marked on.</param>
            <param name="causedMemberType">Member type where this exception is caused.</param>
            <param name="memberParentPath">Parent path.</param>
        </member>
        <member name="M:SecretNest.RemoteAgency.Inspecting.EntityPropertyNameConflictException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the EntityPropertyNameConflictException class with serialized data.
            </summary>
            <param name="info">The SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:SecretNest.RemoteAgency.Inspecting.EntityPropertyNameConflictException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="T:SecretNest.RemoteAgency.Inspecting.EntityPropertyNameConflictExceptionCausedMemberType">
            <summary>
            Contains a list of the type of member which can cause <see cref="T:SecretNest.RemoteAgency.Inspecting.EntityPropertyNameConflictException"/>.
            </summary>
        </member>
        <member name="F:SecretNest.RemoteAgency.Inspecting.EntityPropertyNameConflictExceptionCausedMemberType.Parameter">
            <summary>
            Parameter.
            </summary>
            <remarks>The parameter object should be set to <see cref="P:SecretNest.RemoteAgency.Inspecting.EntityPropertyNameConflictException.Parameter"/>.</remarks>
        </member>
        <member name="F:SecretNest.RemoteAgency.Inspecting.EntityPropertyNameConflictExceptionCausedMemberType.ReturnValue">
            <summary>
            Return value.
            </summary>
        </member>
        <member name="F:SecretNest.RemoteAgency.Inspecting.EntityPropertyNameConflictExceptionCausedMemberType.Property">
            <summary>
            Property
            </summary>
        </member>
        <member name="T:SecretNest.RemoteAgency.Inspecting.InvalidParameterAttributeDataException">
            <summary>
            The exception that is thrown when the invalid attribute or data within attribute is found on a parameter.
            </summary>
        </member>
        <member name="P:SecretNest.RemoteAgency.Inspecting.InvalidParameterAttributeDataException.Parameter">
            <summary>
            Gets the parameter which the attribute is on.
            </summary>
        </member>
        <member name="M:SecretNest.RemoteAgency.Inspecting.InvalidParameterAttributeDataException.#ctor(System.String,System.Attribute,System.Reflection.ParameterInfo,System.Collections.Generic.Stack{System.Reflection.MemberInfo})">
            <summary>
            Initializes an instance of InvalidParameterAttributeDataException.
            </summary>
            <param name="message">Exception message.</param>
            <param name="attribute">Attribute that cause this exception.</param>
            <param name="parameter">Parameter which the attribute is on.</param>
            <param name="memberPath">Member path.</param>
        </member>
        <member name="M:SecretNest.RemoteAgency.Inspecting.InvalidParameterAttributeDataException.#ctor(System.String,System.Attribute,System.Reflection.ParameterInfo,System.Reflection.MemberInfo,System.Collections.Generic.Stack{System.Reflection.MemberInfo})">
            <summary>
            Initializes an instance of InvalidParameterAttributeDataException.
            </summary>
            <param name="message">Exception message.</param>
            <param name="attribute">Attribute that cause this exception.</param>
            <param name="parameter">Parameter which the attribute is on.</param>
            <param name="memberInfo">Member where this attribute is marked on.</param>
            <param name="memberParentPath">Parent path.</param>
        </member>
        <member name="M:SecretNest.RemoteAgency.Inspecting.InvalidParameterAttributeDataException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the InvalidParameterAttributeDataException class with serialized data.
            </summary>
            <param name="info">The SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:SecretNest.RemoteAgency.Inspecting.InvalidParameterAttributeDataException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="T:SecretNest.RemoteAgency.Inspecting.InvalidReturnValueAttributeDataException">
            <summary>
            The exception that is thrown when the invalid attribute or data within attribute is found on the return value.
            </summary>
        </member>
        <member name="M:SecretNest.RemoteAgency.Inspecting.InvalidReturnValueAttributeDataException.#ctor(System.String,System.Attribute,System.Collections.Generic.Stack{System.Reflection.MemberInfo})">
            <summary>
            Initializes an instance of InvalidReturnValueAttributeDataException.
            </summary>
            <param name="message">Exception message.</param>
            <param name="attribute">Attribute that cause this exception.</param>
            <param name="memberPath">Member path.</param>
        </member>
        <member name="M:SecretNest.RemoteAgency.Inspecting.InvalidReturnValueAttributeDataException.#ctor(System.String,System.Attribute,System.Reflection.MemberInfo,System.Collections.Generic.Stack{System.Reflection.MemberInfo})">
            <summary>
            Initializes an instance of InvalidReturnValueAttributeDataException.
            </summary>
            <param name="message">Exception message.</param>
            <param name="attribute">Attribute that cause this exception.</param>
            <param name="memberInfo">Member where this attribute is marked on.</param>
            <param name="memberParentPath">Parent path.</param>
        </member>
        <member name="M:SecretNest.RemoteAgency.Inspecting.InvalidReturnValueAttributeDataException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the InvalidReturnValueAttributeDataException class with serialized data.
            </summary>
            <param name="info">The SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:SecretNest.RemoteAgency.Inspecting.InvalidAttributeDataException">
            <summary>
            The exception that is thrown when the invalid attribute or data within attribute is found.
            </summary>
        </member>
        <member name="P:SecretNest.RemoteAgency.Inspecting.InvalidAttributeDataException.Attribute">
            <summary>
            Gets the attribute that cause this exception.
            </summary>
        </member>
        <member name="P:SecretNest.RemoteAgency.Inspecting.InvalidAttributeDataException.MemberPath">
            <summary>
            Gets the member path.
            </summary>
        </member>
        <member name="M:SecretNest.RemoteAgency.Inspecting.InvalidAttributeDataException.#ctor(System.String,System.Attribute,System.Collections.Generic.Stack{System.Reflection.MemberInfo})">
            <summary>
            Initializes an instance of InvalidAttributeDataException.
            </summary>
            <param name="message">Exception message.</param>
            <param name="attribute">Attribute that cause this exception.</param>
            <param name="memberPath">Member path.</param>
        </member>
        <member name="M:SecretNest.RemoteAgency.Inspecting.InvalidAttributeDataException.#ctor(System.String,System.Attribute,System.Reflection.MemberInfo,System.Collections.Generic.Stack{System.Reflection.MemberInfo})">
            <summary>
            Initializes an instance of InvalidAttributeDataException.
            </summary>
            <param name="message">Exception message.</param>
            <param name="attribute">Attribute that cause this exception.</param>
            <param name="memberInfo">Member where this attribute is marked on.</param>
            <param name="memberParentPath">Parent path.</param>
        </member>
        <member name="M:SecretNest.RemoteAgency.Inspecting.InvalidAttributeDataException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the InvalidAttributeDataException class with serialized data.
            </summary>
            <param name="info">The SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:SecretNest.RemoteAgency.Inspecting.InvalidAttributeDataException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="T:SecretNest.RemoteAgency.RemoteAgencyBase">
            <summary>
            Remote Agency from SecretNest.info. This is an abstract class.
            </summary>
            <seealso cref="T:SecretNest.RemoteAgency.RemoteAgency`2"/>
        </member>
        <member name="P:SecretNest.RemoteAgency.RemoteAgencyBase.DefaultMethodCallingTimeoutForBuilding">
            <summary>
            Gets of sets default setting for method calling timeout in milliseconds. Default value is 0 (use default value while initializing). Only valid when building type (not on building instance).
            </summary>
        </member>
        <member name="P:SecretNest.RemoteAgency.RemoteAgencyBase.DefaultEventAddingTimeoutForBuilding">
            <summary>
            Gets or sets default setting for event adding timeout in milliseconds. Default value is 0 (use default value while initializing). Only valid when building type (not on building instance).
            </summary>
        </member>
        <member name="P:SecretNest.RemoteAgency.RemoteAgencyBase.DefaultEventRemovingTimeoutForBuilding">
            <summary>
            Gets or sets default setting for event removing timeout in milliseconds. Default value is 0 (use default value while initializing). Only valid when building type (not on building instance).
            </summary>
        </member>
        <member name="P:SecretNest.RemoteAgency.RemoteAgencyBase.DefaultEventRaisingTimeoutForBuilding">
            <summary>
            Gets or sets default setting for event raising timeout in milliseconds. Default value is 0 (use default value while initializing). Only valid when building type (not on building instance).
            </summary>
        </member>
        <member name="P:SecretNest.RemoteAgency.RemoteAgencyBase.DefaultPropertyGettingTimeoutForBuilding">
            <summary>
            Gets or sets default setting for property getting timeout in milliseconds. Default value is 0 (use default value while initializing). Only valid when building type (not on building instance).
            </summary>
        </member>
        <member name="P:SecretNest.RemoteAgency.RemoteAgencyBase.DefaultPropertySettingTimeoutForBuilding">
            <summary>
            Gets or sets default setting for property setting timeout in milliseconds. Default value is 0 (use default value while initializing). Only valid when building type (not on building instance).
            </summary>
        </member>
        <member name="M:SecretNest.RemoteAgency.RemoteAgencyBase.CloseAllInstances(System.Boolean)">
            <summary>
            Closes all proxy and service wrapper objects.
            </summary>
            <param name="sendSpecialCommand">Whether need to send special command to notify the remote site. Default is <see langword="true"/>.</param>
            <exception cref="T:System.AggregateException">Thrown when exception occurred while disposing instances.</exception>
        </member>
        <member name="M:SecretNest.RemoteAgency.RemoteAgencyBase.CloseInstance(System.Guid)">
            <summary>
            Closes the proxy or service wrapper by instance id.
            </summary>
            <param name="instanceId">Instance id of the proxy or service wrapper to be closed.</param>
            <returns>Result. <see langword="true"/> when instance is located and closed; <see langword="false"/> when instance is not found.</returns>
            <exception cref="T:System.AggregateException">Thrown when exception occurred while disposing instance.</exception>
        </member>
        <member name="M:SecretNest.RemoteAgency.RemoteAgencyBase.CloseProxy(System.Object)">
            <summary>
            Closes the proxy object.
            </summary>
            <param name="proxy">Proxy to be closed.</param>
            <returns>Result. <see langword="true"/> when instance is located and closed; <see langword="false"/> when instance is not found.</returns>
        </member>
        <member name="M:SecretNest.RemoteAgency.RemoteAgencyBase.CreateProxy(System.Type,System.Guid,System.Guid,System.Guid,System.Int32,System.Boolean)">
            <summary>
            Creates proxy of the interface and instance id specified.
            </summary>
            <param name="sourceInterface">Type of the service contract interface to be implemented by this proxy.</param>
            <param name="targetSiteId">Target site id of the proxy instance to be created.</param>
            <param name="targetInstanceId">Target instance id of the proxy instance to be created.</param>
            <param name="instanceId">Id of the proxy instance to be created. Cannot be set to <see cref="T:System.Guid"/>.Empty.</param>
            <param name="defaultTimeout">Default timeout in milliseconds for all operations; or -1 to indicate that the waiting does not time out. Value cannot be 0. Default value is 90000 (90 sec).</param>
            <param name="buildServiceWrapperWithProxy">When building is required, builds service wrapper and its required entities in the same assembly. Default value is <see langword="true"/>.</param>
            <returns>The created proxy.</returns>
            <remarks>The types required will be created when necessary.</remarks>
            <event cref="E:SecretNest.RemoteAgency.RemoteAgencyBase.BeforeTypeCreated">Raised before type building finished when a type is required for building.</event>
            <event cref="E:SecretNest.RemoteAgency.RemoteAgencyBase.BeforeAssemblyCreated">Raised before module and assembly building finished when a type is required for building.</event>
            <event cref="E:SecretNest.RemoteAgency.RemoteAgencyBase.AfterTypeAndAssemblyBuilt">Raised after the assembly built when a type is required for building.</event>
        </member>
        <member name="M:SecretNest.RemoteAgency.RemoteAgencyBase.CreateProxy(System.Type,System.Guid,System.Guid,System.Int32,System.Boolean)">
            <summary>
            Creates proxy of the interface specified.
            </summary>
            <param name="sourceInterface">Type of the service contract interface to be implemented by this proxy.</param>
            <param name="targetSiteId">Target site id of the proxy instance to be created.</param>
            <param name="targetInstanceId">Target instance id of the proxy instance to be created.</param>
            <param name="defaultTimeout">Default timeout in milliseconds for all operations; or -1 to indicate that the waiting does not time out. Value cannot be 0. Default value is 90000 (90 sec).</param>
            <param name="buildServiceWrapperWithProxy">When building is required, builds service wrapper and its required entities in the same assembly. Default value is <see langword="true"/>.</param>
            <returns>The created proxy.</returns>
            <remarks>The types required will be created when necessary.</remarks>
            <event cref="E:SecretNest.RemoteAgency.RemoteAgencyBase.BeforeTypeCreated">Raised before type building finished when a type is required for building.</event>
            <event cref="E:SecretNest.RemoteAgency.RemoteAgencyBase.BeforeAssemblyCreated">Raised before module and assembly building finished when a type is required for building.</event>
            <event cref="E:SecretNest.RemoteAgency.RemoteAgencyBase.AfterTypeAndAssemblyBuilt">Raised after the assembly built when a type is required for building.</event>
        </member>
        <member name="M:SecretNest.RemoteAgency.RemoteAgencyBase.CreateServiceWrapper(System.Type,System.Object,System.Guid,System.Int32,System.Boolean)">
            <summary>
            Creates service wrapper of the interface, the service object and instance id specified.
            </summary>
            <param name="sourceInterface">Type of service contract interface to be implemented by this service wrapper and have been implemented by the <paramref name="serviceObject"/>.</param>
            <param name="serviceObject">The service object to be wrapped.</param>
            <param name="instanceId">Id of the service wrapper instance to be created. Cannot be set to <see cref="T:System.Guid"/>.Empty.</param>
            <param name="defaultTimeout">Default timeout in milliseconds for all operations; or -1 to indicate that the waiting does not time out. Value cannot be 0. Default value is 90000 (90 sec).</param>
            <param name="buildProxyWithServiceWrapper">When building is required, builds proxy and its required entities in the same assembly. Default value is <see langword="true"/>.</param>
            <remarks>The types required will be created when necessary.</remarks>
            <event cref="E:SecretNest.RemoteAgency.RemoteAgencyBase.BeforeTypeCreated">Raised before type building finished when a type is required for building.</event>
            <event cref="E:SecretNest.RemoteAgency.RemoteAgencyBase.BeforeAssemblyCreated">Raised before module and assembly building finished when a type is required for building.</event>
            <event cref="E:SecretNest.RemoteAgency.RemoteAgencyBase.AfterTypeAndAssemblyBuilt">Raised after the assembly built when a type is required for building.</event>
        </member>
        <member name="M:SecretNest.RemoteAgency.RemoteAgencyBase.CreateServiceWrapper(System.Type,System.Object,System.Int32,System.Boolean)">
            <summary>
            Creates service wrapper of the interface and the service object specified.
            </summary>
            <param name="sourceInterface">Type of service contract interface to be implemented by this service wrapper and have been implemented by the <paramref name="serviceObject"/>.</param>
            <param name="serviceObject">The service object to be wrapped.</param>
            <param name="defaultTimeout">Default timeout in milliseconds for all operations; or -1 to indicate that the waiting does not time out. Value cannot be 0. Default value is 90000 (90 sec).</param>
            <param name="buildProxyWithServiceWrapper">When building is required, builds proxy and its required entities in the same assembly. Default value is <see langword="true"/>.</param>
            <returns>The id of the created service wrapper instance.</returns>
            <remarks>The types required will be created when necessary.</remarks>
            <event cref="E:SecretNest.RemoteAgency.RemoteAgencyBase.BeforeTypeCreated">Raised before type building finished when a type is required for building.</event>
            <event cref="E:SecretNest.RemoteAgency.RemoteAgencyBase.BeforeAssemblyCreated">Raised before module and assembly building finished when a type is required for building.</event>
            <event cref="E:SecretNest.RemoteAgency.RemoteAgencyBase.AfterTypeAndAssemblyBuilt">Raised after the assembly built when a type is required for building.</event>
        </member>
        <member name="M:SecretNest.RemoteAgency.RemoteAgencyBase.Ping(System.Guid,System.TimeSpan,System.Guid@,System.Guid@)">
            <summary>
            Pings to the default target and get the response.
            </summary>
            <param name="localProxyInstanceId">Instance id of the local proxy which will be used to initiate the ping process.</param>
            <param name="maxWaitingTime">Max waiting time.</param>
            <param name="remoteSiteId">Will be set to the sender site id of the response message. Or the target site id of the ping message when no response received.</param>
            <param name="remoteInstanceId">Will be set to the sender instance id of the response message. Or the target instance id of the ping message when no response received.</param>
            <returns>Delay between ping message sending started and response message processing finished.</returns>
        </member>
        <member name="M:SecretNest.RemoteAgency.RemoteAgencyBase.Ping(System.Guid,System.Guid@,System.Guid@)">
            <summary>
            Pings to the default target and get the response, using default waiting time which is 90 secs.
            </summary>
            <param name="localProxyInstanceId">Instance id of the local proxy which will be used to initiate the ping process.</param>
            <param name="remoteSiteId">Will be set to the sender site id of the response message. Or the target site id of the ping message when no response received.</param>
            <param name="remoteInstanceId">Will be set to the sender instance id of the response message. Or the target instance id of the ping message when no response received.</param>
            <returns>Delay between ping message sending started and response message processing finished.</returns>
        </member>
        <member name="M:SecretNest.RemoteAgency.RemoteAgencyBase.TryPing(System.Guid,System.TimeSpan,System.TimeSpan@,System.Guid@,System.Guid@,System.Exception@)">
            <summary>
            Tries to ping to the default target and get the response.
            </summary>
            <param name="localProxyInstanceId">Instance id of the local proxy which will be used to initiate the ping process.</param>
            <param name="maxWaitingTime">Max waiting time.</param>
            <param name="delay">Will be set to the delay between ping message sending started and response message processing finished.</param>
            <param name="remoteSiteId">Will be set to the sender site id of the response message. Or the target site id of the ping message when no response received.</param>
            <param name="remoteInstanceId">Will be set to the sender instance id of the response message. Or the target instance id of the ping message when no response received.</param>
            <param name="exception">Will be set to the exception object when available.</param>
            <returns>Whether the ping request and response processing are finished successfully.</returns>
        </member>
        <member name="M:SecretNest.RemoteAgency.RemoteAgencyBase.TryPing(System.Guid,System.TimeSpan@,System.Guid@,System.Guid@,System.Exception@)">
            <summary>
            Tries to ping to the default target and get the response, using default waiting time which is 90 secs.
            </summary>
            <param name="localProxyInstanceId">Instance id of the local proxy which will be used to initiate the ping process.</param>
            <param name="delay">Will be set to the delay between ping message sending started and response message processing finished.</param>
            <param name="remoteSiteId">Will be set to the sender site id of the response message. Or the target site id of the ping message when no response received.</param>
            <param name="remoteInstanceId">Will be set to the sender instance id of the response message. Or the target instance id of the ping message when no response received.</param>
            <param name="exception">Will be set to the exception object when available.</param>
            <returns>Whether the ping request and response processing are finished successfully.</returns>
        </member>
        <member name="P:SecretNest.RemoteAgency.RemoteAgencyBase.LoopbackAddressDetection">
            <summary>
            Enables or disables loopback address detection before sending a message. Default value is <see langword="true"/>.
            </summary>
            <remarks>When disabled, all internal messages, which sent from and to the same instance of Remote Agency, are treated as others.</remarks>
        </member>
        <member name="P:SecretNest.RemoteAgency.RemoteAgencyBase.SiteId">
            <summary>
            Gets or sets the site id of this instance.
            </summary>
            <value>The site id of this instance.</value>
            <remarks>SiteId is used to identify the instance of Remote Agency when routing messages on network.</remarks>
        </member>
        <member name="M:SecretNest.RemoteAgency.RemoteAgencyBase.#ctor(SecretNest.RemoteAgency.EntityTypeBuilderBase,System.Guid)">
            <summary>
            Initializes the instance of Remote Agency.
            </summary>
            <param name="entityTypeBuilder">Entity type builder.</param>
            <param name="siteId">Site id. A randomized value is used when it is set to <see cref="T:System.Guid"/>.Empty.</param>
        </member>
        <member name="P:SecretNest.RemoteAgency.RemoteAgencyBase.SynchronizationContextTaskFactory">
            <summary>
            Gets or sets the task factory based on synchronization context.
            </summary>
            <conceptualLink target="3c648b23-25dd-454c-b074-d0f3f0a0958c#SynchronizationContext" />
        </member>
        <member name="M:SecretNest.RemoteAgency.RemoteAgencyBase.CreateSynchronizationContextTaskFactoryFromCurrentThread">
            <summary>
            Creates task factory based on synchronization context from current thread and sets it to <see cref="P:SecretNest.RemoteAgency.RemoteAgencyBase.SynchronizationContextTaskFactory"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">The synchronization context cannot be obtained.</exception>
            <conceptualLink target="3c648b23-25dd-454c-b074-d0f3f0a0958c#SynchronizationContext" />
        </member>
        <member name="M:SecretNest.RemoteAgency.RemoteAgencyBase.GenerateEmptyMessage(System.Guid,System.Guid,SecretNest.RemoteAgency.MessageType,System.String,System.Guid,System.Exception)">
            <summary>
            Creates an empty message with sender instance id set to <see cref="T:System.Guid"/>.Empty and one-way is <see langword="true"/>.
            </summary>
            <param name="targetSiteId">Target site id.</param>
            <param name="targetInstanceId">Target instance id.</param>
            <param name="messageType">Message type.</param>
            <param name="assetName">Asset name.</param>
            <param name="messageId">Message id.</param>
            <param name="exception">Exception.</param>
            <returns>Empty message.</returns>
        </member>
        <member name="M:SecretNest.RemoteAgency.RemoteAgencyBase.GenerateEmptyMessage(System.Guid,System.Guid,System.Guid,SecretNest.RemoteAgency.MessageType,System.String,System.Guid,System.Exception,System.Boolean)">
            <summary>
            Creates an empty message.
            </summary>
            <param name="senderInstanceId">Sender instance id.</param>
            <param name="targetSiteId">Target site id.</param>
            <param name="targetInstanceId">Target instance id.</param>
            <param name="messageType">Message type.</param>
            <param name="assetName">Asset name.</param>
            <param name="messageId">Message id.</param>
            <param name="exception">Exception.</param>
            <param name="isOneWay">Whether the message is one-way.</param>
            <returns>Empty message.</returns>
        </member>
        <member name="M:SecretNest.RemoteAgency.RemoteAgencyBase.Create``2(SecretNest.RemoteAgency.SerializingHelperBase{``0,``1},SecretNest.RemoteAgency.EntityTypeBuilderBase,System.Nullable{System.Guid})">
            <summary>
            Creates an instance of Remote Agency.
            </summary>
            <typeparam name="TSerialized">Type of the serialized data.</typeparam>
            <typeparam name="TEntityBase">Type of the parent class of all entities.</typeparam>
            <param name="serializingHelper">Serializer helper.</param>
            <param name="entityTypeBuilder">Entity type builder.</param>
            <param name="siteId">Site id. A randomized value is used when it is set to <see cref="T:System.Guid"/>.Empty or absent.</param>
            <returns>Created Remote Agency instance.</returns>
            <remarks>The function of this method is the same as <see cref="M:SecretNest.RemoteAgency.RemoteAgency`2.Create(SecretNest.RemoteAgency.SerializingHelperBase{`0,`1},SecretNest.RemoteAgency.EntityTypeBuilderBase,System.Nullable{System.Guid})" />.</remarks>
        </member>
        <member name="E:SecretNest.RemoteAgency.RemoteAgencyBase.ExceptionRedirected">
            <summary>
            Occurs when an exception thrown from user code.
            </summary>
            <seealso cref="T:SecretNest.RemoteAgency.Attributes.LocalExceptionHandlingAttribute"/>
        </member>
        <member name="M:SecretNest.RemoteAgency.RemoteAgencyBase.RedirectException(System.Type,System.Guid,System.String,System.Exception)">
            <summary>
            Redirects an exception.
            </summary>
            <param name="serviceContractInterface">The type of the service contract interface.</param>
            <param name="instanceId">Instance id of the instance which throws exception.</param>
            <param name="assetName">The name of the asset which throws exception.</param>
            <param name="exception">Exception to be redirected.</param>
        </member>
        <member name="M:SecretNest.RemoteAgency.RemoteAgencyBase.SetExceptionAsResponse(System.Guid,System.Guid,System.Exception)">
            <summary>
            Sets an exception as the result of a message waiting for response and break the waiting.
            </summary>
            <param name="instanceId">Id of proxy or service wrapper instance.</param>
            <param name="messageId">Message id.</param>
            <param name="exception">The exception object to be passed.</param>
            <seealso cref="T:SecretNest.RemoteAgency.Attributes.OperatingTimeoutTimeAttribute"/>
        </member>
        <member name="E:SecretNest.RemoteAgency.RemoteAgencyBase.MessageForSendingPreparedGeneric">
            <summary>
            Occurs when a message is generated and ready to be sent.
            </summary>
            <remarks>This will be raised only when <see cref="E:SecretNest.RemoteAgency.RemoteAgency`2.MessageForSendingPrepared"/> is not handled.</remarks>
        </member>
        <member name="M:SecretNest.RemoteAgency.RemoteAgencyBase.ProcessReceivedMessage(SecretNest.RemoteAgency.IRemoteAgencyMessage)">
            <summary>
            Processes a message received.
            </summary>
            <param name="message">Received message.</param>
            <event cref="E:SecretNest.RemoteAgency.RemoteAgency`2.AfterMessageReceived">Raised after deserialized before further processing.</event>
        </member>
        <member name="M:SecretNest.RemoteAgency.RemoteAgencyBase.TryGetWaitingMessageIds(System.Guid,System.Collections.Generic.List{System.Guid}@)">
            <summary>
            Tries to gets id of all waiting messages.
            </summary>
            <param name="instanceId">Id of proxy or service wrapper instance.</param>
            <param name="messageIds">Id of all waiting messages.</param>
            <returns>Whether the instance is found.</returns>
        </member>
        <member name="M:SecretNest.RemoteAgency.RemoteAgencyBase.TryGetWaitingMessage(System.Guid,System.Guid,SecretNest.RemoteAgency.IRemoteAgencyMessage@,System.DateTime@)">
            <summary>
            Tries to get information of a waiting message.
            </summary>
            <param name="instanceId">Id of proxy or service wrapper instance.</param>
            <param name="messageId">Message id.</param>
            <param name="sentMessage">The request message of this waiting one, which is sent.</param>
            <param name="startWaiting">The time of waiting started. It can be default value of DateTime when waiting is not started.</param>
            <returns>Whether the waiting message is found.</returns>
        </member>
        <member name="P:SecretNest.RemoteAgency.RemoteAgencyBase.WaitingTimeForDisposing">
            <summary>
            Gets or sets the waiting time in milliseconds for waiting a managing object to complete all communication operations before being disposed.
            </summary>
            <remarks>The code waiting for response will throw a <see cref="T:System.ObjectDisposedException"/> when the communication operation is halt due to disposing.</remarks>
        </member>
        <member name="M:SecretNest.RemoteAgency.RemoteAgencyBase.OnRemoteProxyClosing(System.Guid,System.Nullable{System.Guid})">
            <summary>
            Unlinks specified remote proxy from the event registered in service wrapper objects.
            </summary>
            <param name="siteId">The site id of the instance of the Remote Agency which managing the closing proxy.</param>
            <param name="proxyInstanceId">The instance id of the closing proxy. When set to null, all proxies from the site specified by <paramref name="siteId" /> will be unlinked. Default value is null.</param>
            <remarks>
            <para>A message to notify the closing is sent automatically while remote proxy closing. Call this method manually if exception is thrown while processing the closing of the remote proxy.</para>
            <para>Service wrapper manages links of all proxies which need to handle events. When remote proxy is closed, message for removing event handlers is sent to the service wrapper. But when something wrong happened, network disconnected or proxy crashed for example, the crucial messages may not be able to transferred correctly. In this case, this method need to be called, or the obsolete links will stay in service wrapper which may cause lags or exceptions while processing events.</para></remarks>
        </member>
        <member name="M:SecretNest.RemoteAgency.RemoteAgencyBase.OnRemoteServiceWrapperClosing(System.Guid,System.Nullable{System.Guid})">
            <summary>
            Resets sticky target site of all affected proxies and unlinks specified remote service wrapper from the event registered in proxy objects when the service wrapper is closing.
            </summary>
            <param name="siteId">The site id of the instance of the Remote Agency which managing the closing service wrapper.</param>
            <param name="serviceWrapperInstanceId">The instance id of the closing service wrapper. When set to <see langword="null"/>, all proxies with sticky target site specified by <paramref name="siteId" /> will be reset. Default value is <see langword="null"/>.</param>
            <remarks>
            <para>A message to notify the closing is sent automatically while remote service wrapper closing. Call this method manually if exception is thrown while processing the closing of the remote service wrapper.</para>
            <para>Proxy manages links of all service wrappers which is registered as an event raiser. When remote service wrapper is closed, message for removing the link of the event handler is sent to the proxy. But when something wrong happened, network disconnected or service wrapper crashed for example, the crucial messages may not be able to transferred correctly. In this case, this method need to be called, or the obsolete links will stay in proxy which may cause lags or exceptions while processing events.</para>
            </remarks>
        </member>
        <member name="M:SecretNest.RemoteAgency.RemoteAgencyBase.TryAddTaskScheduler(System.String,System.Threading.Tasks.TaskScheduler)">
            <summary>
            Tries to add a task scheduler for accessing assets to the instance of Remote Agency.
            </summary>
            <param name="name">Name of the task scheduler.</param>
            <param name="taskScheduler">Task scheduler.</param>
            <returns>Result</returns>
            <seealso cref="T:SecretNest.RemoteAgency.Attributes.ThreadLockAttribute"/>
        </member>
        <member name="M:SecretNest.RemoteAgency.RemoteAgencyBase.TryRemoveTaskScheduler(System.String,System.Threading.Tasks.TaskScheduler@)">
            <summary>
            Tries to remove a task scheduler from the instance of Remote Agency.
            </summary>
            <param name="name">Name of the task scheduler.</param>
            <param name="removed">Removed task scheduler.</param>
            <returns>Result</returns>
            <seealso cref="T:SecretNest.RemoteAgency.Attributes.ThreadLockAttribute"/>
        </member>
        <member name="M:SecretNest.RemoteAgency.RemoteAgencyBase.TryGetTaskScheduler(System.String,System.Threading.Tasks.TaskScheduler@)">
            <summary>
            Tries to get a task scheduler from the instance of Remote Agency.
            </summary>
            <param name="name">Name of the task scheduler.</param>
            <param name="taskScheduler">Task scheduler.</param>
            <returns>Result</returns>
            <seealso cref="T:SecretNest.RemoteAgency.Attributes.ThreadLockAttribute"/>
        </member>
        <member name="F:SecretNest.RemoteAgency.RemoteAgencyBase.EntityTypeBuilder">
            <summary>
            Instance of entity type builder.
            </summary>
        </member>
        <member name="E:SecretNest.RemoteAgency.RemoteAgencyBase.BeforeTypeCreated">
            <summary>
            Occurs before type building finished.
            </summary>
            <remarks>Additional code can be added to the type through <see cref="P:SecretNest.RemoteAgency.AssemblyBuilding.BeforeTypeCreatedEventArgs.TypeBuilder"/>.</remarks>
        </member>
        <member name="E:SecretNest.RemoteAgency.RemoteAgencyBase.BeforeAssemblyCreated">
            <summary>
            Occurs before module and assembly building finished.
            </summary>
            <remarks>Additional code can be added to the type through <see cref="P:SecretNest.RemoteAgency.AssemblyBuilding.BeforeAssemblyCreatedEventArgs.ModuleBuilder"/> and <see cref="P:SecretNest.RemoteAgency.AssemblyBuilding.BeforeAssemblyCreatedEventArgs.AssemblyBuilder"/>.</remarks>
        </member>
        <member name="E:SecretNest.RemoteAgency.RemoteAgencyBase.AfterTypeAndAssemblyBuilt">
            <summary>
            Occurs when an assembly is built.
            </summary>
            <remarks>The handler of this event can contains the code for saving assembly for further use, aka caching.</remarks>
        </member>
        <member name="M:SecretNest.RemoteAgency.RemoteAgencyBase.BuildAssembly(SecretNest.RemoteAgency.Inspecting.RemoteAgencyInterfaceBasicInfo,System.Boolean,System.Boolean,System.Type@,System.Type@)">
            <summary>
            Builds an assembly contains built types.
            </summary>
            <param name="basicInfo">Basic info of the source interface.</param>
            <param name="isProxyRequired">Whether proxy is required to be built.</param>
            <param name="isServiceWrapperRequired">Whether service wrapper is required to be built.</param>
            <param name="builtProxy">Type of built proxy. When proxy is not built, the value is <see langword="null"/>.</param>
            <param name="builtServiceWrapper">Type of built service wrapper. When service wrapper is not built, the value is <see langword="null"/>.</param>
            <remarks>Caution: This should not be called if types exist in application domain.</remarks>
        </member>
        <member name="M:SecretNest.RemoteAgency.RemoteAgencyBase.TryGetType(System.String,System.String,System.Type@)">
            <summary>
            Tries to get type specified.
            </summary>
            <param name="assemblyName">Assembly name.</param>
            <param name="typeName">Type name.</param>
            <param name="type">Type object specified.</param>
            <exception cref="T:System.TypeLoadException">Thrown when the type request cannot be found in the assembly specified.</exception>
            <returns>Result.</returns>
        </member>
        <member name="M:SecretNest.RemoteAgency.RemoteAgencyBase.Dispose(System.Boolean)">
            <summary>
            Disposes of the resources (other than memory) used by this instance.
            </summary>
            <param name="disposing">True: release both managed and unmanaged resources; False: release only unmanaged resources.</param>
        </member>
        <member name="M:SecretNest.RemoteAgency.RemoteAgencyBase.Dispose">
            <summary>
            Releases all resources used by this instance.
            </summary>
        </member>
        <member name="T:SecretNest.RemoteAgency.RemoteAgency`2">
            <summary>
            Remote Agency from SecretNest.info. 
            </summary>
            <typeparam name="TSerialized">Type of the serialized data.</typeparam>
            <typeparam name="TEntityBase">Type of the parent class of all entities.</typeparam>
        </member>
        <member name="M:SecretNest.RemoteAgency.RemoteAgency`2.CloseInstance(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:SecretNest.RemoteAgency.RemoteAgency`2.CloseAllInstances(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:SecretNest.RemoteAgency.RemoteAgency`2.CreateProxy``1(System.Guid,System.Guid,System.Guid,System.Int32,System.Boolean)">
            <summary>
            Creates proxy of the interface and instance id specified.
            </summary>
            <typeparam name="TInterface">Service contract interface to be implemented by this proxy.</typeparam>
            <param name="targetSiteId">Target site id of the proxy instance to be created.</param>
            <param name="targetInstanceId">Target instance id of the proxy instance to be created.</param>
            <param name="instanceId">Id of the proxy instance to be created. Cannot be set to <see cref="T:System.Guid"/>.Empty.</param>
            <param name="defaultTimeout">Default timeout in milliseconds for all operations; or -1 to indicate that the waiting does not time out. Value cannot be 0. Default value is 90000 (90 sec).</param>
            <param name="buildServiceWrapperWithProxy">When building is required, builds service wrapper and its required entities in the same assembly. Default value is <see langword="true"/>.</param>
            <returns>The created proxy.</returns>
            <remarks>The types required will be created when necessary.</remarks>
            <event cref="E:SecretNest.RemoteAgency.RemoteAgencyBase.BeforeTypeCreated">Raised before type building finished when a type is required for building.</event>
            <event cref="E:SecretNest.RemoteAgency.RemoteAgencyBase.BeforeAssemblyCreated">Raised before module and assembly building finished when a type is required for building.</event>
            <event cref="E:SecretNest.RemoteAgency.RemoteAgencyBase.AfterTypeAndAssemblyBuilt">Raised after the assembly built when a type is required for building.</event>
        </member>
        <member name="M:SecretNest.RemoteAgency.RemoteAgency`2.CreateProxy``1(System.Guid,System.Guid,System.Int32,System.Boolean)">
            <summary>
            Creates proxy of the interface specified.
            </summary>
            <typeparam name="TInterface">Service contract interface to be implemented by this proxy.</typeparam>
            <param name="targetSiteId">Target site id of the proxy instance to be created.</param>
            <param name="targetInstanceId">Target instance id of the proxy instance to be created.</param>
            <param name="defaultTimeout">Default timeout in milliseconds for all operations; or -1 to indicate that the waiting does not time out. Value cannot be 0. Default value is 90000 (90 sec).</param>
            <param name="buildServiceWrapperWithProxy">When building is required, builds service wrapper and its required entities in the same assembly. Default value is <see langword="true"/>.</param>
            <returns>The created proxy.</returns>
            <remarks>The types required will be created when necessary.</remarks>
            <event cref="E:SecretNest.RemoteAgency.RemoteAgencyBase.BeforeTypeCreated">Raised before type building finished when a type is required for building.</event>
            <event cref="E:SecretNest.RemoteAgency.RemoteAgencyBase.BeforeAssemblyCreated">Raised before module and assembly building finished when a type is required for building.</event>
            <event cref="E:SecretNest.RemoteAgency.RemoteAgencyBase.AfterTypeAndAssemblyBuilt">Raised after the assembly built when a type is required for building.</event>
        </member>
        <member name="M:SecretNest.RemoteAgency.RemoteAgency`2.CreateProxy(System.Type,System.Guid,System.Guid,System.Guid,System.Int32,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:SecretNest.RemoteAgency.RemoteAgency`2.CreateProxy(System.Type,System.Guid,System.Guid,System.Int32,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:SecretNest.RemoteAgency.RemoteAgency`2.CreateServiceWrapper``1(``0,System.Guid,System.Int32,System.Boolean)">
            <summary>
            Creates service wrapper of the interface, the service object and instance id specified.
            </summary>
            <typeparam name="TInterface">Service contract interface of the service to be implemented by this service wrapper and have been implemented by the <paramref name="serviceObject"/>.</typeparam>
            <param name="serviceObject">The service object to be wrapped.</param>
            <param name="instanceId">Id of the service wrapper instance to be created. Cannot be set to <see cref="T:System.Guid"/>.Empty.</param>
            <param name="defaultTimeout">Default timeout in milliseconds for all operations; or -1 to indicate that the waiting does not time out. Value cannot be 0. Default value is 90000 (90 sec).</param>
            <param name="buildProxyWithServiceWrapper">When building is required, builds proxy and its required entities in the same assembly. Default value is <see langword="true"/>.</param>
            <remarks>The types required will be created when necessary.</remarks>
            <event cref="E:SecretNest.RemoteAgency.RemoteAgencyBase.BeforeTypeCreated">Raised before type building finished when a type is required for building.</event>
            <event cref="E:SecretNest.RemoteAgency.RemoteAgencyBase.BeforeAssemblyCreated">Raised before module and assembly building finished when a type is required for building.</event>
            <event cref="E:SecretNest.RemoteAgency.RemoteAgencyBase.AfterTypeAndAssemblyBuilt">Raised after the assembly built when a type is required for building.</event>
        </member>
        <member name="M:SecretNest.RemoteAgency.RemoteAgency`2.CreateServiceWrapper``1(``0,System.Int32,System.Boolean)">
            <summary>
            Creates service wrapper of the interface and the service object specified.
            </summary>
            <typeparam name="TInterface">Service contract interface of the service to be implemented by this service wrapper and have been implemented by the <paramref name="serviceObject"/>.</typeparam>
            <param name="serviceObject">The service object to be wrapped.</param>
            <param name="defaultTimeout">Default timeout in milliseconds for all operations; or -1 to indicate that the waiting does not time out. Value cannot be 0. Default value is 90000 (90 sec).</param>
            <param name="buildProxyWithServiceWrapper">When building is required, builds proxy and its required entities in the same assembly. Default value is <see langword="true"/>.</param>
            <returns>The id of the created service wrapper instance.</returns>
            <remarks>The types required will be created when necessary.</remarks>
            <event cref="E:SecretNest.RemoteAgency.RemoteAgencyBase.BeforeTypeCreated">Raised before type building finished when a type is required for building.</event>
            <event cref="E:SecretNest.RemoteAgency.RemoteAgencyBase.BeforeAssemblyCreated">Raised before module and assembly building finished when a type is required for building.</event>
            <event cref="E:SecretNest.RemoteAgency.RemoteAgencyBase.AfterTypeAndAssemblyBuilt">Raised after the assembly built when a type is required for building.</event>
        </member>
        <member name="M:SecretNest.RemoteAgency.RemoteAgency`2.CreateServiceWrapper(System.Type,System.Object,System.Guid,System.Int32,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:SecretNest.RemoteAgency.RemoteAgency`2.CreateServiceWrapper(System.Type,System.Object,System.Int32,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:SecretNest.RemoteAgency.RemoteAgency`2.TryPing(System.Guid,System.TimeSpan,System.TimeSpan@,System.Guid@,System.Guid@,System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:SecretNest.RemoteAgency.RemoteAgency`2.#ctor(SecretNest.RemoteAgency.SerializingHelperBase{`0,`1},SecretNest.RemoteAgency.EntityTypeBuilderBase,System.Guid)">
            <summary>
            Initializes an instance of Remote Agency with types of serialized data and parent class of all entities specified.
            </summary>
            <param name="serializingHelper">Serializer helper.</param>
            <param name="entityTypeBuilder">Entity type builder.</param>
            <param name="siteId">Site id. A randomized value is used when it is set to <see cref="T:System.Guid"/>.Empty.</param>
        </member>
        <member name="M:SecretNest.RemoteAgency.RemoteAgency`2.Create(SecretNest.RemoteAgency.SerializingHelperBase{`0,`1},SecretNest.RemoteAgency.EntityTypeBuilderBase,System.Nullable{System.Guid})">
            <summary>
            Creates an instance of Remote Agency.
            </summary>
            <param name="serializingHelper">Serializer helper.</param>
            <param name="entityTypeBuilder">Entity type builder.</param>
            <param name="siteId">Site id. A randomized value is used when it is set to <see cref="T:System.Guid"/>.Empty or absent.</param>
            <returns>Created Remote Agency instance.</returns>
            <remarks>The function of this method is the same as <see cref="M:SecretNest.RemoteAgency.RemoteAgencyBase.Create``2(SecretNest.RemoteAgency.SerializingHelperBase{``0,``1},SecretNest.RemoteAgency.EntityTypeBuilderBase,System.Nullable{System.Guid})" />.</remarks>
        </member>
        <member name="E:SecretNest.RemoteAgency.RemoteAgency`2.MessageForSendingPrepared">
            <summary>
            Occurs when a message is generated and ready to be sent.
            </summary>
            <remarks>If this event is not handled, <see cref="E:SecretNest.RemoteAgency.RemoteAgencyBase.MessageForSendingPreparedGeneric"/> will be raised.</remarks>
        </member>
        <member name="M:SecretNest.RemoteAgency.RemoteAgency`2.ProcessReceivedSerializedMessage(`0)">
            <summary>
            Processes a serialized message received.
            </summary>
            <param name="serializedMessage">Received serialized message.</param>
            <event cref="E:SecretNest.RemoteAgency.RemoteAgency`2.AfterMessageReceived">Raised after deserialized before further processing.</event>
        </member>
        <member name="M:SecretNest.RemoteAgency.RemoteAgency`2.ProcessReceivedMessage(`1)">
            <summary>
            Processes a message received.
            </summary>
            <param name="message">Received message.</param>
            <event cref="E:SecretNest.RemoteAgency.RemoteAgency`2.AfterMessageReceived">Raised after deserialized before further processing.</event>
        </member>
        <member name="M:SecretNest.RemoteAgency.RemoteAgency`2.ProcessReceivedMessage(SecretNest.RemoteAgency.IRemoteAgencyMessage)">
            <inheritdoc />
        </member>
        <member name="M:SecretNest.RemoteAgency.RemoteAgency`2.TryGetWaitingMessageIds(System.Guid,System.Collections.Generic.List{System.Guid}@)">
            <inheritdoc />
        </member>
        <member name="M:SecretNest.RemoteAgency.RemoteAgency`2.TryGetWaitingMessage(System.Guid,System.Guid,SecretNest.RemoteAgency.IRemoteAgencyMessage@,System.DateTime@)">
            <inheritdoc />
        </member>
        <member name="M:SecretNest.RemoteAgency.RemoteAgency`2.TryGetWaitingMessage(System.Guid,System.Guid,`1@,System.DateTime@)">
            <summary>
            Tries to get information of a waiting message.
            </summary>
            <param name="instanceId">Id of proxy or service wrapper instance.</param>
            <param name="messageId">Message id.</param>
            <param name="sentMessage">The request message of this waiting one, which is sent.</param>
            <param name="startWaiting">The time of waiting started. It can be default value of DateTime when waiting is not started.</param>
            <returns>Whether the waiting message is found.</returns>
        </member>
        <member name="M:SecretNest.RemoteAgency.RemoteAgency`2.OnRemoteProxyClosing(System.Guid,System.Nullable{System.Guid})">
            <inheritdoc />
        </member>
        <member name="M:SecretNest.RemoteAgency.RemoteAgency`2.OnRemoteServiceWrapperClosing(System.Guid,System.Nullable{System.Guid})">
            <inheritdoc />
        </member>
        <member name="P:SecretNest.RemoteAgency.RemoteAgency`2.BypassSystemMessagesFromFiltering">
            <summary>
            Gets or sets whether system messages should be bypassed from filtering. Default value is <see langword="true" />.
            </summary>
        </member>
        <member name="E:SecretNest.RemoteAgency.RemoteAgency`2.BeforeMessageSending">
            <summary>
            Occurs when a message need to be checked for sending.
            </summary>
            <seealso cref="T:SecretNest.RemoteAgency.MessageProcessTerminatedException" />
            <remarks>Internal routing message, which is sending to an object managed by the same instance of Remote Agency, never raise this event unless <see cref="P:SecretNest.RemoteAgency.RemoteAgencyBase.LoopbackAddressDetection"/> is set to <see langword="false"/>.</remarks>
        </member>
        <member name="E:SecretNest.RemoteAgency.RemoteAgency`2.AfterMessageReceived">
            <summary>
            Occurs when a message need to be checked for sending.
            </summary>
            <seealso cref="T:SecretNest.RemoteAgency.MessageProcessTerminatedException" />
            <remarks>Internal routing message, which is sent from object managed by the same instance of Remote Agency, never raise this event unless <see cref="P:SecretNest.RemoteAgency.RemoteAgencyBase.LoopbackAddressDetection"/> is set to <see langword="false"/>.</remarks>
        </member>
        <member name="M:SecretNest.RemoteAgency.RemoteAgency`2.Serialize(`1)">
            <summary>
            Serializes an entity using the serializer passed from constructor.
            </summary>
            <param name="entity">Entity to serialize.</param>
            <returns>Serialized data.</returns>
        </member>
        <member name="M:SecretNest.RemoteAgency.RemoteAgency`2.Deserialize(`0)">
            <summary>
            Deserializes data using the serializer passed from constructor.
            </summary>
            <param name="serialized">Serialized data.</param>
            <returns>Entity object.</returns>
        </member>
        <member name="T:SecretNest.RemoteAgency.BeforeMessageProcessingEventArgsBase">
            <summary>
            Represents a message to be checked for sending or processing after received. This is an abstract class.
            </summary>
            <seealso cref="T:SecretNest.RemoteAgency.BeforeMessageProcessingEventArgs`2"/>
            <seealso cref="T:SecretNest.RemoteAgency.MessageProcessTerminatedException"/>
        </member>
        <member name="P:SecretNest.RemoteAgency.BeforeMessageProcessingEventArgsBase.FurtherProcessing">
            <summary>
            Defines the further processing of this message.
            </summary>
        </member>
        <member name="P:SecretNest.RemoteAgency.BeforeMessageProcessingEventArgsBase.MessageOfMessageProcessTerminatedException">
            <summary>
            Gets text will be used as the message of <see cref="T:SecretNest.RemoteAgency.MessageProcessTerminatedException"/>.
            </summary>
        </member>
        <member name="M:SecretNest.RemoteAgency.BeforeMessageProcessingEventArgsBase.SetToContinue">
            <summary>
            Continues the message sending or processing.
            </summary>
        </member>
        <member name="M:SecretNest.RemoteAgency.BeforeMessageProcessingEventArgsBase.SetToTerminateAndReturnException(System.String)">
            <summary>
            Terminates this process and send an instance of <see cref="T:SecretNest.RemoteAgency.MessageProcessTerminatedException" /> back to the sender. Cannot be used when <see cref="P:SecretNest.RemoteAgency.MessageBodyEventArgsBase.IsOneWay"/> is <see langword="true" />.
            </summary>
            <param name="message">Message of the exception.</param>
        </member>
        <member name="M:SecretNest.RemoteAgency.BeforeMessageProcessingEventArgsBase.SetToReplaceWithException(System.String)">
            <summary>
            Replaces this message by an instance of <see cref="T:SecretNest.RemoteAgency.MessageProcessTerminatedException" /> then sends it to the receiver. Cannot be used when <see cref="P:SecretNest.RemoteAgency.BeforeMessageProcessingEventArgsBase.MessageDirection"/> is <see cref="F:SecretNest.RemoteAgency.MessageDirection.Sending"/>.
            </summary>
            <param name="message">Message of the exception.</param>
            <remarks>Caution: This may cause the sender throw <see cref="T:SecretNest.RemoteAgency.AccessingTimeOutException"/> if <see cref="P:SecretNest.RemoteAgency.MessageBodyEventArgsBase.IsOneWay"/> is set to <see langword="false"/>.</remarks>
        </member>
        <member name="M:SecretNest.RemoteAgency.BeforeMessageProcessingEventArgsBase.SetToReplaceWithExceptionAndReturn(System.String)">
            <summary>
            Replaces this message by an instance of <see cref="T:SecretNest.RemoteAgency.MessageProcessTerminatedException" /> then sends it to the receiver and the sender.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:SecretNest.RemoteAgency.BeforeMessageProcessingEventArgsBase.SetToTerminateSilently">
            <summary>
            Terminates this process silently.
            </summary>
            <remarks>Caution: This may cause the sender throw <see cref="T:SecretNest.RemoteAgency.AccessingTimeOutException"/>.</remarks>
        </member>
        <member name="P:SecretNest.RemoteAgency.BeforeMessageProcessingEventArgsBase.MessageDirection">
            <summary>
            Gets the direction of the message.
            </summary>
        </member>
        <member name="M:SecretNest.RemoteAgency.BeforeMessageProcessingEventArgsBase.#ctor(SecretNest.RemoteAgency.MessageDirection)">
            <summary>
            Initializes an instance of BeforeMessageProcessingEventArgsBase.
            </summary>
            <param name="messageDirection">Direction of the message.</param>
        </member>
        <member name="T:SecretNest.RemoteAgency.MessageFurtherProcessing">
            <summary>
            Defines the further processing of this message.
            </summary>
        </member>
        <member name="F:SecretNest.RemoteAgency.MessageFurtherProcessing.Continue">
            <summary>
            Continues.
            </summary>
        </member>
        <member name="F:SecretNest.RemoteAgency.MessageFurtherProcessing.TerminateAndReturnException">
            <summary>
            Terminates this process and send an instance of <see cref="T:SecretNest.RemoteAgency.MessageProcessTerminatedException" /> back to the sender. Cannot be used when <see cref="P:SecretNest.RemoteAgency.MessageBodyEventArgsBase.IsOneWay"/> is <see langword="true" />.
            </summary>
        </member>
        <member name="F:SecretNest.RemoteAgency.MessageFurtherProcessing.ReplaceWithException">
            <summary>
            Replaces this message by an instance of <see cref="T:SecretNest.RemoteAgency.MessageProcessTerminatedException" /> then sends it to the receiver. Cannot be used when <see cref="P:SecretNest.RemoteAgency.BeforeMessageProcessingEventArgsBase.MessageDirection"/> is <see cref="F:SecretNest.RemoteAgency.MessageDirection.Sending"/>.
            </summary>
        </member>
        <member name="F:SecretNest.RemoteAgency.MessageFurtherProcessing.ReplaceWithExceptionAndReturn">
            <summary>
            Replaces this message by an instance of <see cref="T:SecretNest.RemoteAgency.MessageProcessTerminatedException" /> then sends it to the receiver and the sender. Cannot be used when <see cref="P:SecretNest.RemoteAgency.BeforeMessageProcessingEventArgsBase.MessageDirection"/> is <see cref="F:SecretNest.RemoteAgency.MessageDirection.Sending"/> or <see cref="P:SecretNest.RemoteAgency.MessageBodyEventArgsBase.IsOneWay"/> is <see langword="true" />. 
            </summary>
        </member>
        <member name="F:SecretNest.RemoteAgency.MessageFurtherProcessing.TerminateSilently">
            <summary>
            Terminates this process silently.
            </summary>
        </member>
        <member name="T:SecretNest.RemoteAgency.MessageDirection">
            <summary>
            Indicates the direction of the message.
            </summary>
        </member>
        <member name="F:SecretNest.RemoteAgency.MessageDirection.Receiving">
            <summary>
            Indicates this message is received from object outside this instance of Remote Agency.
            </summary>
        </member>
        <member name="F:SecretNest.RemoteAgency.MessageDirection.Sending">
            <summary>
            Indicates this message is prepared to send to a target instance of Remote Agency.
            </summary>
        </member>
        <member name="T:SecretNest.RemoteAgency.BeforeMessageProcessingEventArgs`2">
            <summary>
            Represents a message to be checked for sending or processing after received.
            </summary>
            <typeparam name="TSerialized">Type of the serialized data.</typeparam>
            <typeparam name="TEntityBase">Type of the parent class of all entities.</typeparam>
            <seealso cref="T:SecretNest.RemoteAgency.MessageProcessTerminatedException"/>
        </member>
        <member name="P:SecretNest.RemoteAgency.BeforeMessageProcessingEventArgs`2.MessageBody">
            <summary>
            Gets the message body.
            </summary>
        </member>
        <member name="M:SecretNest.RemoteAgency.BeforeMessageProcessingEventArgs`2.Serialize">
            <inheritdoc />
        </member>
        <member name="P:SecretNest.RemoteAgency.BeforeMessageProcessingEventArgs`2.IncludeTerminatedMessageInException">
            <summary>
            Gets or sets whether the terminated message should be included in exception. Default value is <see langword="true"/>.
            </summary>
            <remarks>If enabled, the terminated message will be saved in <see cref="P:SecretNest.RemoteAgency.MessageProcessTerminatedException.TerminatedMessage"/>.</remarks>
        </member>
        <member name="P:SecretNest.RemoteAgency.BeforeMessageProcessingEventArgs`2.MessageBodyGeneric">
            <inheritdoc />
        </member>
        <member name="M:SecretNest.RemoteAgency.BeforeMessageProcessingEventArgs`2.#ctor(SecretNest.RemoteAgency.MessageDirection,`1,System.Func{`1,`0})">
            <summary>
            Initializes an instance of BeforeMessageProcessingEventArgs.
            </summary>
            <param name="messageDirection">Direction of the message.</param>
            <param name="messageBody">Message.</param>
            <param name="serializerCallback">Callback for serializing message body.</param>
        </member>
        <member name="T:SecretNest.RemoteAgency.ExceptionRedirectedEventArgs">
            <summary>
            Represents an redirected exception thrown from user code.
            </summary>
        </member>
        <member name="P:SecretNest.RemoteAgency.ExceptionRedirectedEventArgs.ServiceContractInterface">
            <summary>
            Gets the type of the service contract interface.
            </summary>
        </member>
        <member name="P:SecretNest.RemoteAgency.ExceptionRedirectedEventArgs.InstanceId">
            <summary>
            Gets the instance id of the instance which throws exception.
            </summary>
        </member>
        <member name="P:SecretNest.RemoteAgency.ExceptionRedirectedEventArgs.AssetName">
            <summary>
            Gets the name of the asset which throws exception.
            </summary>
        </member>
        <member name="P:SecretNest.RemoteAgency.ExceptionRedirectedEventArgs.RedirectedException">
            <summary>
            Gets the exception thrown.
            </summary>
        </member>
        <member name="M:SecretNest.RemoteAgency.ExceptionRedirectedEventArgs.#ctor(System.Type,System.Guid,System.String,System.Exception)">
            <summary>
            Initializes an instance of ExceptionRedirectedEventArgs.
            </summary>
            <param name="serviceContractInterface">The type of the service contract interface.</param>
            <param name="instanceId">Instance id of the instance which throws exception.</param>
            <param name="assetName">The name of the asset which throws exception.</param>
            <param name="exception">Exception thrown.</param>
        </member>
        <member name="T:SecretNest.RemoteAgency.IMessageBodyGenericEventArgs`2">
            <summary>
            Defines property and method to hold the message body and provide an access point for serialization.
            </summary>
            <typeparam name="TSerialized">Type of the serialized data.</typeparam>
            <typeparam name="TEntityBase">Type of the parent class of all entities.</typeparam>
        </member>
        <member name="P:SecretNest.RemoteAgency.IMessageBodyGenericEventArgs`2.MessageBody">
            <summary>
            Gets the message body.
            </summary>
        </member>
        <member name="M:SecretNest.RemoteAgency.IMessageBodyGenericEventArgs`2.Serialize">
            <summary>
            Serializes this message using the serializer from the Remote Agency instance.
            </summary>
            <returns>Serialized data.</returns>
        </member>
        <member name="T:SecretNest.RemoteAgency.MessageBodyEventArgs">
            <summary>
            Defines a class contains message body derived from <see cref="T:SecretNest.RemoteAgency.MessageBodyEventArgsBase"/>.
            </summary>
        </member>
        <member name="M:SecretNest.RemoteAgency.MessageBodyEventArgs.#ctor(SecretNest.RemoteAgency.IRemoteAgencyMessage)">
            <summary>
            Initializes an instance of MessageBodyEventArgs.
            </summary>
            <param name="messageBodyGeneric">Message body</param>
        </member>
        <member name="P:SecretNest.RemoteAgency.MessageBodyEventArgs.MessageBodyGeneric">
            <inheritdoc />
        </member>
        <member name="T:SecretNest.RemoteAgency.MessageBodyEventArgs`2">
            <summary>
            Defines a class contains message body derived from <see cref="T:SecretNest.RemoteAgency.MessageBodyEventArgsBase"/> and implemented from <see cref="T:SecretNest.RemoteAgency.IMessageBodyGenericEventArgs`2"/>.
            </summary>
            <typeparam name="TSerialized">Type of the serialized data.</typeparam>
            <typeparam name="TEntityBase">Type of the parent class of all entities.</typeparam>
        </member>
        <member name="P:SecretNest.RemoteAgency.MessageBodyEventArgs`2.MessageBody">
            <summary>
            Gets the message body.
            </summary>
        </member>
        <member name="M:SecretNest.RemoteAgency.MessageBodyEventArgs`2.Serialize">
            <inheritdoc />
        </member>
        <member name="M:SecretNest.RemoteAgency.MessageBodyEventArgs`2.#ctor(`1,System.Func{`1,`0})">
            <summary>
            Initializes an instance of MessageBodyEventArgs.
            </summary>
            <param name="messageBody">Message.</param>
            <param name="serializerCallback">Callback for serializing message body.</param>
        </member>
        <member name="T:SecretNest.RemoteAgency.MessageBodyEventArgsBase">
            <summary>
            Defines a class contains message body derived from <see cref="T:System.EventArgs"/>. This is an abstract class.
            </summary>
            <seealso cref="T:SecretNest.RemoteAgency.MessageBodyEventArgs`2"/>
        </member>
        <member name="P:SecretNest.RemoteAgency.MessageBodyEventArgsBase.SenderSiteId">
            <summary>
            Gets the site id of the source Remote Agency instance.
            </summary>
        </member>
        <member name="P:SecretNest.RemoteAgency.MessageBodyEventArgsBase.TargetSiteId">
            <summary>
            Gets the site id of the target Remote Agency instance.
            </summary>
        </member>
        <member name="P:SecretNest.RemoteAgency.MessageBodyEventArgsBase.SenderInstanceId">
            <summary>
            Gets the instance id of the source proxy or service wrapper.
            </summary>
        </member>
        <member name="P:SecretNest.RemoteAgency.MessageBodyEventArgsBase.TargetInstanceId">
            <summary>
            Gets the instance id of the target proxy or service wrapper.
            </summary>
        </member>
        <member name="P:SecretNest.RemoteAgency.MessageBodyEventArgsBase.MessageType">
            <summary>
            Gets the message type.
            </summary>
        </member>
        <member name="P:SecretNest.RemoteAgency.MessageBodyEventArgsBase.AssetName">
            <summary>
            Gets the asset name.
            </summary>
        </member>
        <member name="P:SecretNest.RemoteAgency.MessageBodyEventArgsBase.MessageId">
            <summary>
            Gets the message id.
            </summary>
        </member>
        <member name="P:SecretNest.RemoteAgency.MessageBodyEventArgsBase.Exception">
            <summary>
            Gets the exception object.
            </summary>
        </member>
        <member name="P:SecretNest.RemoteAgency.MessageBodyEventArgsBase.IsOneWay">
            <summary>
            Gets whether this message is one-way (do not need any response).
            </summary>
        </member>
        <member name="P:SecretNest.RemoteAgency.MessageBodyEventArgsBase.IsEmptyMessage">
            <summary>
            Gets whether this message is empty, not containing parameters required by asset.
            </summary>
        </member>
        <member name="P:SecretNest.RemoteAgency.MessageBodyEventArgsBase.MessageBodyGeneric">
            <summary>
            Gets the message body.
            </summary>
        </member>
        <member name="T:SecretNest.RemoteAgency.Injection.EventHelper.ProxyEventHelper">
            <summary>
            Defines a helper class to be implanted into built assembly for event servicing in proxy.
            </summary>
        </member>
        <member name="P:SecretNest.RemoteAgency.Injection.EventHelper.ProxyEventHelper.SendEventAddingMessageCallback">
            <summary>
            Gets or sets the callback for a delegate which will be called while an event adding is requested.
            </summary>
        </member>
        <member name="P:SecretNest.RemoteAgency.Injection.EventHelper.ProxyEventHelper.SendEventRemovingMessageCallback">
            <summary>
            Gets or sets the callback for a delegate which will be called while an event removing is requested.
            </summary>
        </member>
        <member name="P:SecretNest.RemoteAgency.Injection.EventHelper.ProxyEventHelper.SendOneWaySpecialCommandMessageCallback">
            <summary>
            Gets or sets the callback for a delegate which will be called while a special command message need to be sent to a remote site without getting response.
            </summary>
        </member>
        <member name="P:SecretNest.RemoteAgency.Injection.EventHelper.ProxyEventHelper.CreateEmptyMessageCallback">
            <summary>
            Gets or sets the callback for a delegate which will be called while an empty message need to be created.
            </summary>
        </member>
        <member name="M:SecretNest.RemoteAgency.Injection.EventHelper.ProxyEventHelper.OnRemoteServiceWrapperClosing(System.Guid,System.Nullable{System.Guid})">
            <summary>
            Unlinks specified remote service wrapper from the event registered in proxy objects when the service wrapper is closing.
            </summary>
            <param name="siteId">The site id of the instance of the Remote Agency which managing the closing service wrapper.</param>
            <param name="serviceWrapperInstanceId">The instance id of the closing service wrapper. When set to <see langword="null"/>, all proxies with sticky target site specified by <paramref name="siteId" /> will be reset. Default value is null.</param>
            <exception cref="T:System.AggregateException">When exceptions occurred.</exception>
        </member>
        <member name="M:SecretNest.RemoteAgency.Injection.EventHelper.ProxyEventHelper.CloseRequestedByManagingObject(System.Boolean)">
            <summary>
            Sends messages to all relevant objects and closes the functions of this object.
            </summary>
            <param name="sendSpecialCommand">Whether need to send special command.</param>
            <exception cref="T:System.AggregateException">When exceptions occurred.</exception>
        </member>
        <member name="M:SecretNest.RemoteAgency.Injection.EventHelper.ProxyEventHelper.AddRouter(SecretNest.RemoteAgency.Injection.EventHelper.ProxyEventRouterBase)">
            <summary>
            Adds a builder.
            </summary>
            <param name="router">An instance of a derived class of ProxyEventRouterBase.</param>
        </member>
        <member name="M:SecretNest.RemoteAgency.Injection.EventHelper.ProxyEventHelper.ProcessEventRaisingMessage(SecretNest.RemoteAgency.IRemoteAgencyMessage,System.Exception@,SecretNest.RemoteAgency.Attributes.LocalExceptionHandlingMode@)">
            <summary>
            Processes an event raising message and returns response.
            </summary>
            <param name="message">Message to be processed.</param>
            <param name="exception">Exception thrown while running user code.</param>
            <param name="localExceptionHandlingMode">Local exception handling mode.</param>
            <returns>Message contains the data to be returned.</returns>
        </member>
        <member name="M:SecretNest.RemoteAgency.Injection.EventHelper.ProxyEventHelper.ProcessOneWayEventRaisingMessage(SecretNest.RemoteAgency.IRemoteAgencyMessage,SecretNest.RemoteAgency.Attributes.LocalExceptionHandlingMode@)">
            <summary>
            Processes an event raising message.
            </summary>
            <param name="message">Message to be processed.</param>
            <param name="localExceptionHandlingMode">Local exception handling mode.</param>
        </member>
        <member name="T:SecretNest.RemoteAgency.Injection.EventHelper.ProxyEventRouterBase">
            <summary>
            Defines a helper class to be implanted into built assembly for handling an event handler in proxy. This is an abstract class.
            </summary>
        </member>
        <member name="P:SecretNest.RemoteAgency.Injection.EventHelper.ProxyEventRouterBase.ProxyEventHelper">
            <summary>
            Gets or sets the helper instance.
            </summary>
        </member>
        <member name="P:SecretNest.RemoteAgency.Injection.EventHelper.ProxyEventRouterBase.AssetName">
            <summary>
            Gets the asset name.
            </summary>
        </member>
        <member name="M:SecretNest.RemoteAgency.Injection.EventHelper.ProxyEventRouterBase.ProcessEventRaisingMessage(SecretNest.RemoteAgency.IRemoteAgencyMessage,System.Exception@)">
            <summary>
            Processes an event raising message and returns response.
            </summary>
            <param name="message">Message to be processed.</param>
            <param name="exception">Exception thrown while running user code.</param>
            <returns>Message contains the data to be returned.</returns>
        </member>
        <member name="M:SecretNest.RemoteAgency.Injection.EventHelper.ProxyEventRouterBase.ProcessOneWayEventRaisingMessage(SecretNest.RemoteAgency.IRemoteAgencyMessage)">
            <summary>
            Processes an event raising message.
            </summary>
            <param name="message">Message to be processed.</param>
        </member>
        <member name="M:SecretNest.RemoteAgency.Injection.EventHelper.ProxyEventRouterBase.OnRemoteServiceWrapperClosing(System.Guid,System.Nullable{System.Guid})">
            <summary>
            Unlinks specified remote service wrapper from the event registered in proxy objects when the service wrapper is closing.
            </summary>
            <param name="siteId">The site id of the instance of the Remote Agency which managing the closing service wrapper.</param>
            <param name="serviceWrapperInstanceId">The instance id of the closing service wrapper. When set to <see langword="null"/>, all proxies with sticky target site specified by <paramref name="siteId" /> will be reset. Default value is null.</param>
        </member>
        <member name="M:SecretNest.RemoteAgency.Injection.EventHelper.ProxyEventRouterBase.GetTargetSiteIdAndInstanceIdThenClose">
            <summary>
            Gets target site id and instance id then closes this object.
            </summary>
            <returns>Target site id and instance id.</returns>
        </member>
        <member name="P:SecretNest.RemoteAgency.Injection.EventHelper.ProxyEventRouterBase.LocalExceptionHandlingMode">
            <summary>
            Gets the local exception handling mode setting of this asset.
            </summary>
        </member>
        <member name="M:SecretNest.RemoteAgency.Injection.EventHelper.ProxyEventRouterBase.Close">
            <summary>
            Closes this object.
            </summary>
        </member>
        <member name="T:SecretNest.RemoteAgency.Injection.EventHelper.ProxyEventRouterBase`1">
            <summary>
            Defines a helper class to be implanted into built assembly for handling an event handler in proxy. This is an abstract class.
            </summary>
            <typeparam name="TDelegate">Delegate of event.</typeparam>
        </member>
        <member name="M:SecretNest.RemoteAgency.Injection.EventHelper.ProxyEventRouterBase`1.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes an instance of ProxyEventRouterBase.
            </summary>
            <param name="addingTimeout">Timeout for waiting for the response of event adding.</param>
            <param name="removingTimeout">Timeout for waiting for the response of event removing.</param>
        </member>
        <member name="M:SecretNest.RemoteAgency.Injection.EventHelper.ProxyEventRouterBase`1.ProcessEventAdding(`0)">
            <summary>
            Processes an event adding.
            </summary>
            <param name="value">Handler.</param>
        </member>
        <member name="M:SecretNest.RemoteAgency.Injection.EventHelper.ProxyEventRouterBase`1.ProcessEventRemoving(`0)">
            <summary>
            Processes an event removing.
            </summary>
            <param name="value">Handler.</param>
        </member>
        <member name="M:SecretNest.RemoteAgency.Injection.EventHelper.ProxyEventRouterBase`1.OnRemoteServiceWrapperClosing(System.Guid,System.Nullable{System.Guid})">
            <inheritdoc />
        </member>
        <member name="M:SecretNest.RemoteAgency.Injection.EventHelper.ProxyEventRouterBase`1.GetTargetSiteIdAndInstanceIdThenClose">
            <inheritdoc />
        </member>
        <member name="M:SecretNest.RemoteAgency.Injection.EventHelper.ProxyEventRouterBase`1.Close">
            <inheritdoc />
        </member>
        <member name="T:SecretNest.RemoteAgency.Injection.EventHelper.ProxyEventRouterBase`2">
            <summary>
            Defines a helper class to be implanted into built assembly for handling an one-way event handler in proxy. This is an abstract class.
            </summary>
            <typeparam name="TDelegate">Delegate of event.</typeparam>
            <typeparam name="TParameterEntity">Parameter entity type.</typeparam>
        </member>
        <member name="M:SecretNest.RemoteAgency.Injection.EventHelper.ProxyEventRouterBase`2.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes an instance of ProxyEventRouterBase.
            </summary>
            <param name="addingTimeout">Timeout for waiting for the response of event adding.</param>
            <param name="removingTimeout">Timeout for waiting for the response of event removing.</param>
        </member>
        <member name="M:SecretNest.RemoteAgency.Injection.EventHelper.ProxyEventRouterBase`2.ProcessOneWayEventRaisingMessage(SecretNest.RemoteAgency.IRemoteAgencyMessage)">
            <inheritdoc />
        </member>
        <member name="T:SecretNest.RemoteAgency.Injection.EventHelper.ServiceWrapperEventHelper`1">
            <summary>
            Defines a helper class to be implanted into built assembly for event servicing in service wrapper.
            </summary>
            <typeparam name="TServiceContractInterface">Service contract interface type.</typeparam>
        </member>
        <member name="P:SecretNest.RemoteAgency.Injection.EventHelper.ServiceWrapperEventHelper`1.ServiceObject">
            <summary>
            Gets or sets the service object.
            </summary>
        </member>
        <member name="M:SecretNest.RemoteAgency.Injection.EventHelper.ServiceWrapperEventHelper`1.ProcessEventAddingMessage(SecretNest.RemoteAgency.IRemoteAgencyMessage)">
            <summary>
            Processes an event adding.
            </summary>
            <param name="message">Message to be processed.</param>
        </member>
        <member name="M:SecretNest.RemoteAgency.Injection.EventHelper.ServiceWrapperEventHelper`1.ProcessEventRemovingMessage(SecretNest.RemoteAgency.IRemoteAgencyMessage)">
            <summary>
            Processes an event removing.
            </summary>
            <param name="message">Message to be processed.</param>
        </member>
        <member name="M:SecretNest.RemoteAgency.Injection.EventHelper.ServiceWrapperEventHelper`1.OnRemoteProxyClosing(System.Guid,System.Nullable{System.Guid})">
            <summary>
            Unlinks specified remote proxy from the event registered in service wrapper objects.
            </summary>
            <param name="siteId">The site id of the instance of the Remote Agency which managing the closing proxy.</param>
            <param name="proxyInstanceId">The instance id of the closing proxy. When set to null, all proxies from the site specified by <paramref name="siteId" /> will be unlinked.</param>
            <exception cref="T:System.AggregateException">When exceptions occurred.</exception>
        </member>
        <member name="M:SecretNest.RemoteAgency.Injection.EventHelper.ServiceWrapperEventHelper`1.CloseRequestedByManagingObject(System.Boolean)">
            <summary>
            Sends messages to all relevant objects and closes the functions of this object.
            </summary>
            <param name="sendSpecialCommand">Whether need to send special command.</param>
            <exception cref="T:System.AggregateException">When exceptions occurred.</exception>
        </member>
        <member name="P:SecretNest.RemoteAgency.Injection.EventHelper.ServiceWrapperEventHelper`1.SendEventMessageCallback">
            <summary>
            Gets or sets the callback for a delegate which will be called while an event raising message need to be sent to a remote site and get response of it.
            </summary>
        </member>
        <member name="P:SecretNest.RemoteAgency.Injection.EventHelper.ServiceWrapperEventHelper`1.SendOneWayEventMessageCallback">
            <summary>
            Gets or sets the callback for a delegate which will be called while an event raising message need to be sent to a remote site without getting response.
            </summary>
        </member>
        <member name="P:SecretNest.RemoteAgency.Injection.EventHelper.ServiceWrapperEventHelper`1.SendOneWaySpecialCommandMessageCallback">
            <summary>
            Gets or sets the callback for a delegate which will be called while a special command message need to be sent to a remote site without getting response.
            </summary>
        </member>
        <member name="P:SecretNest.RemoteAgency.Injection.EventHelper.ServiceWrapperEventHelper`1.CreateEmptyMessageCallback">
            <summary>
            Gets or sets the callback for a delegate which will be called while an empty message need to be created.
            </summary>
        </member>
        <member name="M:SecretNest.RemoteAgency.Injection.EventHelper.ServiceWrapperEventHelper`1.AddBuilder(System.String,System.Func{SecretNest.RemoteAgency.Injection.EventHelper.ServiceWrapperEventRouterBase{`0}})">
            <summary>
            Adds a builder callback.
            </summary>
            <param name="assetName">Name of the event.</param>
            <param name="callback">Callback for creating an instance of a derived class of EventRouterBase.</param>
        </member>
        <member name="T:SecretNest.RemoteAgency.Injection.EventHelper.ServiceWrapperEventRouterBase`1">
            <summary>
            Defines a helper class to be implanted into built assembly for handling an event handler in service wrapper. This is an abstract class.
            </summary>
            <typeparam name="TServiceContractInterface">Service contract interface type.</typeparam>
        </member>
        <member name="P:SecretNest.RemoteAgency.Injection.EventHelper.ServiceWrapperEventRouterBase`1.AssetName">
            <summary>
            Gets or sets the asset name.
            </summary>
        </member>
        <member name="P:SecretNest.RemoteAgency.Injection.EventHelper.ServiceWrapperEventRouterBase`1.RemoteSiteId">
            <summary>
            Gets or sets the remote site id. Remote site is the site contains event handler.
            </summary>
        </member>
        <member name="P:SecretNest.RemoteAgency.Injection.EventHelper.ServiceWrapperEventRouterBase`1.RemoteInstanceId">
            <summary>
            Gets or sets the remote instance id. Remote instance is the instance contains event handler.
            </summary>
        </member>
        <member name="P:SecretNest.RemoteAgency.Injection.EventHelper.ServiceWrapperEventRouterBase`1.SendEventMessageCallback">
            <summary>
            Gets or sets the callback for a delegate which will be called while an event raising message need to be sent to a remote site and get response of it.
            </summary>
        </member>
        <member name="P:SecretNest.RemoteAgency.Injection.EventHelper.ServiceWrapperEventRouterBase`1.SendOneWayEventMessageCallback">
            <summary>
            Gets or sets the callback for a delegate which will be called while an event raising message need to be sent to a remote site without getting response.
            </summary>
        </member>
        <member name="M:SecretNest.RemoteAgency.Injection.EventHelper.ServiceWrapperEventRouterBase`1.CloseRequestedByManagingObject(`0)">
            <summary>
            Sends message to relevant object and closes the functions of this object.
            </summary>
            <param name="serviceObject">Service object.</param>
        </member>
        <member name="M:SecretNest.RemoteAgency.Injection.EventHelper.ServiceWrapperEventRouterBase`1.RemoveHandler(`0)">
            <summary>
            Removes the handler.
            </summary>
            <param name="serviceObject">Service object.</param>
        </member>
        <member name="M:SecretNest.RemoteAgency.Injection.EventHelper.ServiceWrapperEventRouterBase`1.AddHandler(`0)">
            <summary>
            Adds the handler.
            </summary>
            <param name="serviceObject">Service object.</param>
        </member>
        <member name="T:SecretNest.RemoteAgency.Injection.EventHelper.ServiceWrapperEventRouterBase`2">
            <summary>
            Defines a helper class to be implanted into built assembly for handling an one-way event handler in service wrapper. This is an abstract class.
            </summary>
            <typeparam name="TServiceContractInterface">Service contract interface type.</typeparam>
            <typeparam name="TParameterEntity">Parameter entity type.</typeparam>
        </member>
        <member name="T:SecretNest.RemoteAgency.Injection.EventHelper.ServiceWrapperEventRouterBase`3">
            <summary>
            Defines a helper class to be implanted into built assembly for handling a two-way event handler in service wrapper. This is an abstract class.
            </summary>
            <typeparam name="TServiceContractInterface">Service contract interface type.</typeparam>
            <typeparam name="TParameterEntity">Parameter entity type.</typeparam>
            <typeparam name="TReturnValueEntity">Return value entity type.</typeparam>
        </member>
        <member name="M:SecretNest.RemoteAgency.Injection.EventHelper.ServiceWrapperEventRouterBase`3.#ctor(System.Int32)">
            <summary>
            Initialize an instance of ServiceWrapperEventRouterBase.
            </summary>
            <param name="timeout">Timeout for waiting for the response of event raising.</param>
        </member>
        <member name="T:SecretNest.RemoteAgency.Injection.EventHelper.ProxyEventRouterBase`3">
            <summary>
            Defines a helper class to be implanted into built assembly for handling an two-way event handler in proxy. This is an abstract class.
            </summary>
            <typeparam name="TDelegate">Delegate of event.</typeparam>
            <typeparam name="TParameterEntity">Parameter entity type.</typeparam>
            <typeparam name="TReturnValueEntity">Return value entity type.</typeparam>
        </member>
        <member name="M:SecretNest.RemoteAgency.Injection.EventHelper.ProxyEventRouterBase`3.#ctor(System.Int32,System.Int32)">
            <summary>
            Initialize an instance of ProxyEventRouterBase.
            </summary>
            <param name="addingTimeout">Timeout for waiting for the response of event adding.</param>
            <param name="removingTimeout">Timeout for waiting for the response of event removing.</param>
        </member>
        <member name="M:SecretNest.RemoteAgency.Injection.EventHelper.ProxyEventRouterBase`3.ProcessEventRaisingMessage(SecretNest.RemoteAgency.IRemoteAgencyMessage,System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:SecretNest.RemoteAgency.Injection.EventHelper.ProxyEventRouterBase`3.ProcessOneWayEventRaisingMessage(SecretNest.RemoteAgency.IRemoteAgencyMessage)">
            <inheritdoc />
        </member>
    </members>
</doc>
