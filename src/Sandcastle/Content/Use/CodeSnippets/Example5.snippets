<?xml version="1.0" encoding="utf-8" ?>
<examples>
  <item id="Example5#Interface">
    <sampleCode language="CSharp">
public interface ITest5&lt;out T&gt; where T: struct
{
    T Current { get; }

    int Value { get; set; }

    [ReturnIgnored] int ReturnIgnored { get; }

    [ReturnIgnored] int ReturnIgnoredButException { get; }
}
    </sampleCode>
    <sampleCode language="VisualBasic">
Public Interface ITest5(Of Out T As {Structure})
    ReadOnly Property Current As T

    Property Value As Integer

    &lt;ReturnIgnored&gt; ReadOnly Property ReturnIgnored As Integer

    &lt;ReturnIgnored&gt; ReadOnly Property ReturnIgnoredButException As Integer
End Interface
    </sampleCode>
  </item>

  <item id="Example5#Server">
    <sampleCode language="CSharp">
public class Server5 : ITest5&lt;DateTime&gt;
{
    public DateTime Current =&gt; DateTime.Now;
    public int Value { get; set; }
    public int ReturnIgnored =&gt; 100;
    public int ReturnIgnoredButException =&gt; throw new Exception("oops.");
}
    </sampleCode>
    <sampleCode language="VisualBasic">
Public Class Server5
    Implements ITest5(Of DateTime)

    Public ReadOnly Property Current As Date Implements ITest5(Of Date).Current
        Get
            Return DateTime.Now
        End Get
    End Property

    Public Property Value As Integer Implements ITest5(Of Date).Value

    Public ReadOnly Property ReturnIgnored As Integer Implements ITest5(Of Date).ReturnIgnored
        Get
            Return 100
        End Get
    End Property

    Public ReadOnly Property ReturnIgnoredButException As Integer Implements ITest5(Of Date).ReturnIgnoredButException
        Get
            Throw New Exception("oops.")
        End Get
    End Property
End Class
    </sampleCode>
  </item>

  <item id="Example5#Test">
    <sampleCode language="CSharp">
//test router
var router = new RemoteAgencyRouter&lt;byte[], object&gt;();

//Server
var originalService = new Server5();
using var serverRemoteAgencyInstance = RemoteAgencyBase.CreateWithBinarySerializer(true);
router.AddRemoteAgencyInstance(serverRemoteAgencyInstance);
var serverSiteId = serverRemoteAgencyInstance.SiteId;
var serviceWrapperInstanceId = serverRemoteAgencyInstance.CreateServiceWrapper(originalService);

//Client
using var clientRemoteAgencyInstance = RemoteAgencyBase.CreateWithBinarySerializer(true);
router.AddRemoteAgencyInstance(clientRemoteAgencyInstance);
var clientProxy = clientRemoteAgencyInstance.CreateProxy&lt;ITest5&lt;DateTime&gt;&gt;(serverSiteId, serviceWrapperInstanceId).ProxyGeneric;

//Run test
Console.WriteLine("Current(Current date):");
Console.WriteLine(clientProxy.Current.ToLongDateString());

Console.WriteLine("Value(Set, No return):");
clientProxy.Value = 100;

Console.WriteLine("Value(Get, 100):");
Console.WriteLine(clientProxy.Value);

Console.WriteLine("ReturnIgnored(Get, 0 due to return ignored):");
Console.WriteLine(clientProxy.ReturnIgnored);

Console.WriteLine("ReturnIgnored(Get, Exception):");
try
{
    _ = clientProxy.ReturnIgnoredButException;
}
catch (Exception e)
{
    Console.WriteLine("Predicted Exception: " + e);
}

Console.Write("Press any key to continue...");
Console.ReadKey(true);
Console.WriteLine();
    </sampleCode>
    <sampleCode language="VisualBasic">
'test router
Dim router = New RemoteAgencyRouter(Of Byte(), Object)

'Server
Dim originalService As New Server5()
Dim serverRemoteAgencyInstance = RemoteAgencyBase.CreateWithBinarySerializer(True)
router.AddRemoteAgencyInstance(serverRemoteAgencyInstance)
Dim serverSiteId = serverRemoteAgencyInstance.SiteId
Dim serviceWrapperInstanceId = serverRemoteAgencyInstance.CreateServiceWrapper(originalService)

'Client
Dim clientRemoteAgencyInstance = RemoteAgencyBase.CreateWithBinarySerializer(True)
router.AddRemoteAgencyInstance(clientRemoteAgencyInstance)
Dim clientProxy = clientRemoteAgencyInstance.CreateProxy(Of ITest5(Of DateTime))(serverSiteId, serviceWrapperInstanceId).ProxyGeneric

'Run test
Console.WriteLine("Current(Current date):")
Console.WriteLine(clientProxy.Current.ToLongDateString())

Console.WriteLine("Value(Set, No return):")
clientProxy.Value = 100

Console.WriteLine("Value(Get, 100):")
Console.WriteLine(clientProxy.Value)

Console.WriteLine("ReturnIgnored(Get, 0 due to return ignored):")
Console.WriteLine(clientProxy.ReturnIgnored)

Console.WriteLine("ReturnIgnored(Get, Exception):")
Try
    Dim useless = clientProxy.ReturnIgnoredButException
Catch ex As Exception
    Console.WriteLine("Predicted Exception: " + ex.ToString())
End Try

Console.Write("Press any key to continue...")
Console.ReadKey(True)
Console.WriteLine()

serverRemoteAgencyInstance.Dispose()
clientRemoteAgencyInstance.Dispose()
    </sampleCode>
  </item>
</examples>

