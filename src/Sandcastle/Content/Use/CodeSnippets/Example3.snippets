<?xml version="1.0" encoding="utf-8" ?>
<examples>
  <item id="Example3#Interface">
    <sampleCode language="CSharp">
public interface ITest3
{
    [AssetOneWayOperating]
    void Add(long value);

    [PropertyGetOneWayOperating]
    long ValueOneWayGet { get; }

    [AssetIgnored]
    long ValueIgnored { get; }

    long Value { get; set; }

    [LocalExceptionHandling]
    void WithException([ParameterReturnRequiredProperty("TwoWayProperty")] EntityInTest3 entity);

    [OperatingTimeoutTime(1000)]
    void TimeOutMethod();
}
    </sampleCode>
    <sampleCode language="VisualBasic">
Public Interface ITest3
    &lt;AssetOneWayOperating&gt;
    Sub Add(v As Long)

    &lt;PropertyGetOneWayOperating&gt;
    ReadOnly Property ValueOneWayGet As Long

    &lt;AssetIgnored&gt;
    ReadOnly Property ValueIgnored As Long

    Property Value As Long

    &lt;LocalExceptionHandling&gt;
    Sub WithException(&lt;ParameterReturnRequiredProperty("TwoWayProperty")&gt; entity As EntityInTest3)

    &lt;OperatingTimeoutTime(1000)&gt;
    Sub TimeOutMethod()
End Interface
    </sampleCode>
  </item>

  <item id="Example3#Entity">
    <sampleCode language="CSharp">
public class EntityInTest3
{
    public string FromClientToServerProperty { get; set; }

    public string TwoWayProperty { get; set; }
}
    </sampleCode>
    <sampleCode language="VisualBasic">
Public Class EntityInTest3
    Public Property FromClientToServerProperty As String

    Public Property TwoWayProperty As String
End Class
    </sampleCode>
  </item>

  <item id="Example3#Server">
    <sampleCode language="CSharp">
public class Server3 : ITest3
{
    private long _data;

    public void Add(long value)
    {
        _data += value;
    }

    public long ValueOneWayGet 
    {
        get
        {
            Console.WriteLine("Server side: ValueOneWayGet called.");
            return _data;
        }
    }
    public long ValueIgnored =&gt; 0;

    public long Value { get =&gt; _data; set =&gt; _data = value; }

    public void WithException(EntityInTest3 entity)
    {
        Console.WriteLine($"Server side: entity.FromClientToServerProperty (should be SetFromClient): {entity.FromClientToServerProperty}");
        Console.WriteLine($"Server side: entity.TwoWayProperty (should be SetFromClient): {entity.TwoWayProperty}");

        entity.TwoWayProperty = "SetBeforeException";
        throw new Exception("oops.");
    }

    public void TimeOutMethod()
    {
        Thread.Sleep(2000);
    }
}
    </sampleCode>
    <sampleCode language="VisualBasic">
Public Class Server3
    Implements ITest3

    Public Sub Add(v As Long) Implements ITest3.Add
        Value += v
    End Sub

    Public ReadOnly Property ValueOneWayGet As Long Implements ITest3.ValueOneWayGet
        Get
            Console.WriteLine("Server side: ValueOneWayGet called.")
            Return Value
        End Get
    End Property

    Public ReadOnly Property ValueIgnored As Long Implements ITest3.ValueIgnored
        Get
            Return 0
        End Get
    End Property

    Public Property Value As Long Implements ITest3.Value

    Public Sub WithException(entity As EntityInTest3) Implements ITest3.WithException
        Console.WriteLine($"Server side: entity.FromClientToServerProperty (should be SetFromClient): {entity.FromClientToServerProperty}")
        Console.WriteLine($"Server side: entity.TwoWayProperty (should be SetFromClient): {entity.TwoWayProperty}")

        entity.TwoWayProperty = "SetBeforeException"
        Throw New Exception("oops.")
    End Sub

    Public Sub TimeOutMethod() Implements ITest3.TimeOutMethod
        Thread.Sleep(2000)
    End Sub
End Class
    </sampleCode>
  </item>

  <item id="Example3#Test">
    <sampleCode language="CSharp">
//test router
var router = new RemoteAgencyRouter&lt;byte[], object&gt;();

//Server
var originalService = new Server3();
using var serverRemoteAgencyInstance = RemoteAgencyBase.CreateWithBinarySerializer(true);
router.AddRemoteAgencyInstance(serverRemoteAgencyInstance);
serverRemoteAgencyInstance.ExceptionRedirected += ServerRemoteAgencyInstance_ExceptionRedirected;
var serverSiteId = serverRemoteAgencyInstance.SiteId;
var serviceWrapperInstanceId = serverRemoteAgencyInstance.CreateServiceWrapper(originalService);

//Client
using var clientRemoteAgencyInstance = RemoteAgencyBase.CreateWithBinarySerializer(true);
router.AddRemoteAgencyInstance(clientRemoteAgencyInstance);
var clientProxy = clientRemoteAgencyInstance.CreateProxy&lt;ITest3&gt;(serverSiteId, serviceWrapperInstanceId).ProxyGeneric;

//Run test
Console.WriteLine("Add(No return):");
clientProxy.Add(100);

Console.WriteLine("ValueOneWayGet(Default value returning after server processed):");
Console.WriteLine(clientProxy.ValueOneWayGet);

Console.WriteLine("ValueIgnored(Exception):");
try
{
    _ = clientProxy.ValueIgnored;
}
catch (Exception e)
{
    Console.WriteLine("Predicted Exception: " + e);
}

Console.WriteLine("Value(Get, 100):");
Console.WriteLine(clientProxy.Value);

Console.WriteLine("Value(Set, no return):");
clientProxy.Value = 500;

Console.WriteLine("Add(No return):");
clientProxy.Add(100);

Console.WriteLine("Value(Get, 600):");
Console.WriteLine(clientProxy.Value);

var entity = new EntityInTest3
{
    FromClientToServerProperty = "SetFromClient",
    TwoWayProperty = "SetFromClient"
};
Console.WriteLine("WithException:");
try
{
    clientProxy.WithException(entity);
}
catch (Exception e)
{
    Console.WriteLine("Predicted Exception: " + e.Message);
}
Console.WriteLine($"Client side: entity.FromClientToServerProperty (should be SetFromClient): {entity.FromClientToServerProperty}");
Console.WriteLine($"Client side: entity.TwoWayProperty (should be SetBeforeException): {entity.TwoWayProperty}");

Console.WriteLine("TimeOutMethod:");
try
{
    clientProxy.TimeOutMethod();
}
catch (Exception e)
{
    Console.WriteLine("Predicted Exception: " + e);
}

Console.Write("Press any key to continue...");
Console.ReadKey(true);
Console.WriteLine();
    </sampleCode>
    <sampleCode language="VisualBasic">
'test router
Dim router = New RemoteAgencyRouter(Of Byte(), Object)

'Server
Dim originalService As New Server3()
Dim serverRemoteAgencyInstance = RemoteAgencyBase.CreateWithBinarySerializer(True)
router.AddRemoteAgencyInstance(serverRemoteAgencyInstance)
AddHandler serverRemoteAgencyInstance.ExceptionRedirected, AddressOf ServerRemoteAgencyInstance_ExceptionRedirected
Dim serverSiteId = serverRemoteAgencyInstance.SiteId
Dim serviceWrapperInstanceId = serverRemoteAgencyInstance.CreateServiceWrapper(originalService)

'Client
Dim clientRemoteAgencyInstance = RemoteAgencyBase.CreateWithBinarySerializer(True)
router.AddRemoteAgencyInstance(clientRemoteAgencyInstance)
Dim clientProxy = clientRemoteAgencyInstance.CreateProxy(Of ITest3)(serverSiteId, serviceWrapperInstanceId).ProxyGeneric

'Run test
Console.WriteLine("Add(No return):")
clientProxy.Add(100)

Console.WriteLine("ValueOneWayGet(Default value returning after server processed):")
Console.WriteLine(clientProxy.ValueOneWayGet)

Console.WriteLine("ValueIgnored(Exception):")

Try
    ' ReSharper disable once UnusedVariable
    Dim useless = clientProxy.ValueIgnored
Catch ex As Exception
    Console.WriteLine("Predicted Exception: " + ex.ToString())
End Try

Console.WriteLine("Value(Get, 100):")
Console.WriteLine(clientProxy.Value)

Console.WriteLine("Value(Set, no return):")
clientProxy.Value = 500

Console.WriteLine("Add(No return):")
clientProxy.Add(100)

Console.WriteLine("Value(Get, 600):")
Console.WriteLine(clientProxy.Value)

Dim entity As New EntityInTest3()
With entity
    .FromClientToServerProperty = "SetFromClient"
    .TwoWayProperty = "SetFromClient"
End With

Console.WriteLine("WithException:")
Try
    clientProxy.WithException(entity)
Catch ex As Exception
    Console.WriteLine("Predicted Exception: " + ex.ToString())
End Try
Console.WriteLine($"Client side: entity.FromClientToServerProperty (should be SetFromClient): {entity.FromClientToServerProperty}")
Console.WriteLine($"Client side: entity.TwoWayProperty (should be SetBeforeException): {entity.TwoWayProperty}")

Console.WriteLine("TimeOutMethod:")
Try
    clientProxy.TimeOutMethod()
Catch ex As Exception
    Console.WriteLine("Predicted Exception: " + ex.ToString())
End Try

Console.Write("Press any key to continue...")
Console.ReadKey(True)
Console.WriteLine()

serverRemoteAgencyInstance.Dispose()
clientRemoteAgencyInstance.Dispose()
    </sampleCode>
  </item>

  <item id="Example3#Handler">
    <sampleCode language="CSharp">
private static void ServerRemoteAgencyInstance_ExceptionRedirected(object sender, ExceptionRedirectedEventArgs e)
{   
    Console.WriteLine($"Server side exception: \n  Interface: {e.ServiceContractInterface.FullName}\n  InstanceId: {e.InstanceId}\n  AssetName: {e.AssetName}\n  ExceptionType: {e.RedirectedException.GetType().FullName}\n  ExceptionMessage: {e.RedirectedException.Message}");
}
    </sampleCode>
    <sampleCode language="VisualBasic">
Private Shared Sub ServerRemoteAgencyInstance_ExceptionRedirected(sender As Object, e As ExceptionRedirectedEventArgs)
    Console.WriteLine(
        "Server side exception: " + vbCrLf +
        $"  Interface: {e.ServiceContractInterface.FullName}" + vbCrLf +
        $"  InstanceId: {e.InstanceId}" + vbCrLf +
        $"  AssetName: {e.AssetName}" + vbCrLf +
        $"  ExceptionType: {e.RedirectedException.GetType().FullName}" + vbCrLf +
        $"  ExceptionMessage: {e.RedirectedException.Message}")
End Sub
    </sampleCode>
  </item>
</examples>

