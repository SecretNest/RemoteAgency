<?xml version="1.0" encoding="utf-8" ?>
<examples>
  <item id="Example8#Interface">
    <sampleCode language="CSharp">
public interface ITest8
{
    [EventParameterIgnored("sender")]
    event EventHandler MyEventWithHandler;

    void Test();
}
    </sampleCode>
    <sampleCode language="VisualBasic">
Public Interface ITest8
    &lt;EventParameterIgnored("sender")&gt;
    Event MyEventWithHandler As EventHandler

    Sub Test()
End Interface
    </sampleCode>
  </item>

  <item id="Example8#Server">
    <sampleCode language="CSharp">
public class Server8 : ITest8
{
    public event EventHandler MyEventWithHandler;

    public void Test()
    {
        Console.WriteLine("Server side: Method called.");
        MyEventWithHandler?.Invoke(this, EventArgs.Empty);
    }
}
    </sampleCode>
    <sampleCode language="VisualBasic">
Public Class Server8
    Implements ITest8

    Public Event MyEventWithHandler As EventHandler Implements ITest8.MyEventWithHandler

    Public Sub Test() Implements ITest8.Test
        Console.WriteLine("Server side: Method called.")
        RaiseEvent MyEventWithHandler(Me, EventArgs.Empty)
    End Sub
End Class
    </sampleCode>
  </item>

  <item id="Example8#Test">
    <sampleCode language="CSharp">
//test router
var router = new RemoteAgencyRouter&lt;byte[], object&gt;();

//Server
var originalService = new Server8();
using var serverRemoteAgencyInstance = RemoteAgencyBase.CreateWithBinarySerializer(true);
router.AddRemoteAgencyInstance(serverRemoteAgencyInstance);
var serverSiteId = serverRemoteAgencyInstance.SiteId;
var serviceWrapperInstanceId = serverRemoteAgencyInstance.CreateServiceWrapper(originalService);

//Client 1
using var clientRemoteAgencyInstance1 = RemoteAgencyBase.CreateWithBinarySerializer(true);
router.AddRemoteAgencyInstance(clientRemoteAgencyInstance1);
var clientProxy1 = clientRemoteAgencyInstance1.CreateProxy&lt;ITest8&gt;(serverSiteId, serviceWrapperInstanceId).ProxyGeneric;

//Client 2
using var clientRemoteAgencyInstance2 = RemoteAgencyBase.CreateWithBinarySerializer(true);
router.AddRemoteAgencyInstance(clientRemoteAgencyInstance2);
var clientProxy2 = clientRemoteAgencyInstance2.CreateProxy&lt;ITest8&gt;(serverSiteId, serviceWrapperInstanceId).ProxyGeneric;

//Run test
Console.WriteLine("Run(WithoutHandler)");
clientProxy1.Test();

Console.WriteLine("Run(HandlerFromClient1)");
clientProxy1.MyEventWithHandler += ClientProxy1_MyEventWithHandler;
clientProxy1.Test();

Console.WriteLine("Run(HandlerFromClient1+2)");
clientProxy2.MyEventWithHandler += ClientProxy2_MyEventWithHandler;
clientProxy1.Test();

Console.WriteLine("Run(HandlerFromClient1+2+2)");
clientProxy2.MyEventWithHandler += ClientProxy2_MyEventWithHandler;
clientProxy1.Test();

Console.WriteLine("Run(HandlerFromClient2+2)");
clientProxy1.MyEventWithHandler -= ClientProxy2_MyEventWithHandler;
clientProxy1.Test();

Console.WriteLine("Run(WithoutHandler2)");
clientProxy2.MyEventWithHandler -= ClientProxy2_MyEventWithHandler;
clientProxy1.Test();

Console.WriteLine("Run(WithoutHandler2)");
clientProxy1.MyEventWithHandler -= ClientProxy1_MyEventWithHandler; //useless coz no active handler registered.
clientProxy1.Test();

Console.WriteLine("Run(WithoutHandler)");
clientProxy2.MyEventWithHandler -= ClientProxy2_MyEventWithHandler;
clientProxy1.Test();

Console.Write("Press any key to continue...");
Console.ReadKey(true);
Console.WriteLine();
    </sampleCode>
    <sampleCode language="VisualBasic">
'test router
Dim router = New RemoteAgencyRouter(Of Byte(), Object)

'Server
Dim originalService As New Server8()
Dim serverRemoteAgencyInstance = RemoteAgencyBase.CreateWithBinarySerializer(True)
router.AddRemoteAgencyInstance(serverRemoteAgencyInstance)
Dim serverSiteId = serverRemoteAgencyInstance.SiteId
Dim serviceWrapperInstanceId = serverRemoteAgencyInstance.CreateServiceWrapper(originalService)

'Client 1
Dim clientRemoteAgencyInstance1 = RemoteAgencyBase.CreateWithBinarySerializer(True)
router.AddRemoteAgencyInstance(clientRemoteAgencyInstance1)
Dim clientProxy1 = clientRemoteAgencyInstance1.CreateProxy(Of ITest8)(serverSiteId, serviceWrapperInstanceId).ProxyGeneric

'Client 2
Dim clientRemoteAgencyInstance2 = RemoteAgencyBase.CreateWithBinarySerializer(True)
router.AddRemoteAgencyInstance(clientRemoteAgencyInstance2)
Dim clientProxy2 = clientRemoteAgencyInstance2.CreateProxy(Of ITest8)(serverSiteId, serviceWrapperInstanceId).ProxyGeneric

'Run test
Console.WriteLine("Run(WithoutHandler)")
clientProxy1.Test()

Console.WriteLine("Run(HandlerFromClient1)")
AddHandler clientProxy1.MyEventWithHandler, AddressOf ClientProxy1_MyEventWithHandler
clientProxy1.Test()

Console.WriteLine("Run(HandlerFromClient1+2)")
AddHandler clientProxy2.MyEventWithHandler, AddressOf ClientProxy2_MyEventWithHandler
clientProxy1.Test()

Console.WriteLine("Run(HandlerFromClient1+2+2)")
AddHandler clientProxy2.MyEventWithHandler, AddressOf ClientProxy2_MyEventWithHandler
clientProxy1.Test()

Console.WriteLine("Run(HandlerFromClient2+2)")
RemoveHandler clientProxy1.MyEventWithHandler, AddressOf ClientProxy1_MyEventWithHandler
clientProxy1.Test()

Console.WriteLine("Run(WithoutHandler2)")
RemoveHandler clientProxy2.MyEventWithHandler, AddressOf ClientProxy2_MyEventWithHandler
clientProxy1.Test()

Console.WriteLine("Run(WithoutHandler2)")
RemoveHandler clientProxy1.MyEventWithHandler, AddressOf ClientProxy1_MyEventWithHandler 'useless coz no active handler registered.
clientProxy1.Test()

Console.WriteLine("Run(WithoutHandler)")
RemoveHandler clientProxy2.MyEventWithHandler, AddressOf ClientProxy2_MyEventWithHandler
clientProxy1.Test()

Console.Write("Press any key to continue...")
Console.ReadKey(True)
Console.WriteLine()

serverRemoteAgencyInstance.Dispose()
clientRemoteAgencyInstance1.Dispose()
clientRemoteAgencyInstance2.Dispose()
    </sampleCode>
  </item>

  <item id="Example8#Handler">
    <sampleCode language="CSharp">
private static void ClientProxy1_MyEventWithHandler(object sender, EventArgs e)
{
    Console.WriteLine("Client1 Event Handler Called.");
}

private static void ClientProxy2_MyEventWithHandler(object sender, EventArgs e)
{
    Console.WriteLine("Client2 Event Handler Called.");
}
    </sampleCode>
    <sampleCode language="VisualBasic">
Private Shared Sub ClientProxy1_MyEventWithHandler(sender As Object, e As EventArgs)
    Console.WriteLine("Client1 Event Handler Called.")
End Sub

Private Shared Sub ClientProxy2_MyEventWithHandler(sender As Object, e As EventArgs)
    Console.WriteLine("Client2 Event Handler Called.")
End Sub
    </sampleCode>
  </item>
</examples>

