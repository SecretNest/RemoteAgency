<?xml version="1.0" encoding="utf-8" ?>
<examples>
  <item id="Example12#Interface">
    <sampleCode language="CSharp">
public interface ITest12
{
    void Hello();
}
    </sampleCode>
    <sampleCode language="VisualBasic">
Public Interface ITest12
    Sub Hello()
End Interface
    </sampleCode>
  </item>

  <item id="Example12#Server">
    <sampleCode language="CSharp">
public class Server12 : ITest12
{
    public void Hello()
    {
        Console.WriteLine("Hello world.");
    }
}
    </sampleCode>
    <sampleCode language="VisualBasic">
Public Class Server12
    Implements ITest12

    Public Sub Hello() Implements ITest12.Hello
        Console.WriteLine("Hello world.")
    End Sub
End Class
    </sampleCode>
  </item>

  <item id="Example12#Test">
    <sampleCode language="CSharp">
//test router
var router = new RemoteAgencyRouter&lt;byte[], object&gt;();

//Server
var originalService = new Server12();
using var serverRemoteAgencyInstance = RemoteAgencyBase.CreateWithBinarySerializer(true);
router.AddRemoteAgencyInstance(serverRemoteAgencyInstance);
var serverSiteId = serverRemoteAgencyInstance.SiteId;
var serviceWrapperInstanceId = serverRemoteAgencyInstance.CreateServiceWrapper(originalService);

//Client
using var clientRemoteAgencyInstance = RemoteAgencyBase.CreateWithBinarySerializer(true);
router.AddRemoteAgencyInstance(clientRemoteAgencyInstance);
var clientProxyInstanceId = clientRemoteAgencyInstance.CreateProxy&lt;ITest12&gt;(serverSiteId, serviceWrapperInstanceId).InstanceId;

//Run test
Console.WriteLine("Ping (ms):");
Console.WriteLine(clientRemoteAgencyInstance.Ping(clientProxyInstanceId, out var remoteSiteId, out var remoteInstanceId).TotalMilliseconds);
if (serverSiteId != remoteSiteId ||
    serviceWrapperInstanceId != remoteInstanceId)
{
    Console.WriteLine("D'oh!");
}

Console.Write("Press any key to continue...");
Console.ReadKey(true);
Console.WriteLine();
    </sampleCode>
    <sampleCode language="VisualBasic">
'test router
Dim router = New RemoteAgencyRouter(Of Byte(), Object)

'Server
Dim originalService As New Server12()
Dim serverRemoteAgencyInstance = RemoteAgencyBase.CreateWithBinarySerializer(True)
router.AddRemoteAgencyInstance(serverRemoteAgencyInstance)
Dim serverSiteId = serverRemoteAgencyInstance.SiteId
Dim serviceWrapperInstanceId = serverRemoteAgencyInstance.CreateServiceWrapper(originalService)

'Client
Dim clientRemoteAgencyInstance = RemoteAgencyBase.CreateWithBinarySerializer(True)
router.AddRemoteAgencyInstance(clientRemoteAgencyInstance)
Dim clientProxyInstanceId = clientRemoteAgencyInstance.CreateProxy(Of ITest12)(serverSiteId, serviceWrapperInstanceId).InstanceId

'Run test
Console.WriteLine("Ping (ms):")
Dim remoteSiteId = Guid.Empty
Dim remoteInstanceId = Guid.Empty
Console.WriteLine(clientRemoteAgencyInstance.Ping(clientProxyInstanceId, remoteSiteId, remoteInstanceId).TotalMilliseconds)
If serverSiteId &lt;&gt; remoteSiteId OrElse serviceWrapperInstanceId &lt;&gt; remoteInstanceId Then
    Console.WriteLine("D'oh!")
End If

Console.Write("Press any key to continue...")
Console.ReadKey(True)
Console.WriteLine()

serverRemoteAgencyInstance.Dispose()
clientRemoteAgencyInstance.Dispose()
    </sampleCode>
  </item>
</examples>

