<?xml version="1.0" encoding="utf-8"?>
<topic id="e7b65736-b2df-4aa9-897a-3a3050d3cceb" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <introduction>
      <para>There are several attributes for tuning asset about ignoring, one-way mode and timeout.</para>
    </introduction>

    <section>
      <title>Ignoring</title>
      <content>
        <para>When one asset is not required to be handled by Remote Agency, mark it with <codeEntityReference qualifyHint="false">T:SecretNest.RemoteAgency.Attributes.AssetIgnoredAttribute</codeEntityReference>. The code accessing the ignored asset has no effect and gets only the default outputs or throws an exception based on the setting <codeEntityReference qualifyHint="false">P:SecretNest.RemoteAgency.Attributes.AssetIgnoredAttribute.WillThrowException</codeEntityReference>.</para>
      </content>
    </section>

    <section>
      <title>One-way and timeout</title>
      <content>
        <para>Usually, asset accessing are in two-way mode, request and response. Even no data need to be returned from remote site, like a void method, the response is still necessary to confirm that there is no exception thrown in the remote site and to ensure the code execution order.</para>
        <para>After the request message sent, the caller waits for the response. The waiting time varies depending on settings, which can be specified in following priority order:</para>
        <list class="ordered">
          <listItem><para>Marked by <codeEntityReference qualifyHint="false">T:SecretNest.RemoteAgency.Attributes.OperatingTimeoutTimeAttribute</codeEntityReference> on method, property and event.</para></listItem>
          <listItem><para>Marked by <codeEntityReference qualifyHint="false">T:SecretNest.RemoteAgency.Attributes.OperatingTimeoutTimeAttribute</codeEntityReference> on delegate related to event, for event only.</para></listItem>
          <listItem><para>Marked by <codeEntityReference qualifyHint="false">T:SecretNest.RemoteAgency.Attributes.OperatingTimeoutTimeAttribute</codeEntityReference> on interface.</para></listItem>
          <listItem><para>Set by <codeEntityReference qualifyHint="false">P:SecretNest.RemoteAgency.RemoteAgency.DefaultMethodCallingTimeoutForBuilding</codeEntityReference>, <codeEntityReference qualifyHint="false">P:SecretNest.RemoteAgency.RemoteAgency.DefaultEventAddingTimeoutForBuilding</codeEntityReference>, <codeEntityReference qualifyHint="false">P:SecretNest.RemoteAgency.RemoteAgency.DefaultEventRemovingTimeoutForBuilding</codeEntityReference>, <codeEntityReference qualifyHint="false">P:SecretNest.RemoteAgency.RemoteAgency.DefaultEventRaisingTimeoutForBuilding</codeEntityReference>, <codeEntityReference qualifyHint="false">P:SecretNest.RemoteAgency.RemoteAgency.DefaultPropertyGettingTimeoutForBuilding</codeEntityReference> and <codeEntityReference qualifyHint="false">P:SecretNest.RemoteAgency.RemoteAgency.DefaultPropertySettingTimeoutForBuilding</codeEntityReference> while building proxy and service wrapper.</para></listItem>
          <listItem><para>Set by parameter defaultTimeout in CreateProxy (<codeEntityReference qualifyHint="false" autoUpgrade="true">M:SecretNest.RemoteAgency.RemoteAgency.CreateProxy(System.Type,System.Guid,System.Guid,System.Guid@,System.Int32,System.Boolean)</codeEntityReference>, <codeEntityReference qualifyHint="false" autoUpgrade="true">M:SecretNest.RemoteAgency.RemoteAgency`2.CreateProxy(System.Type,System.Guid,System.Guid,System.Guid@,System.Int32,System.Boolean)</codeEntityReference> and <codeEntityReference qualifyHint="false" autoUpgrade="true">M:SecretNest.RemoteAgency.RemoteAgency`2.CreateProxy``1(System.Guid,System.Guid,System.Guid@,System.Int32,System.Boolean)</codeEntityReference>) and CreateServiceWrapper (<codeEntityReference qualifyHint="false" autoUpgrade="true">M:SecretNest.RemoteAgency.RemoteAgency.CreateServiceWrapper(System.Type,System.Object,System.Guid@,System.Int32,System.Boolean)</codeEntityReference>, <codeEntityReference qualifyHint="false" autoUpgrade="true">M:SecretNest.RemoteAgency.RemoteAgency`2.CreateServiceWrapper(System.Type,System.Object,System.Guid@,System.Int32,System.Boolean)</codeEntityReference> and <codeEntityReference qualifyHint="false" autoUpgrade="true">M:SecretNest.RemoteAgency.RemoteAgency`2.CreateServiceWrapper``1(``0,System.Guid@,System.Int32,System.Boolean)</codeEntityReference>).</para></listItem>
        </list>
        <para>When no setting specified in one place, or the timeout is set to 0, the lower priority will be used. The parameter defaultTimeout in order 5 cannot be set as 0. When timed out, the code waiting for response throws an <codeEntityReference qualifyHint="false">T:SecretNest.RemoteAgency.AccessingTimeOutException</codeEntityReference>. When timeout is set to -1, the wait will never time out.</para>
        <para>For breaking a waiting message, user can send an exception manually with instance id and message id. Instance id can be fetched while adding proxy or service wrapper. All waiting messages of an instance can be fetched by TryGetWaitingMessageIds (<codeEntityReference qualifyHint="false" autoUpgrade="true">M:SecretNest.RemoteAgency.RemoteAgency.TryGetWaitingMessageIds(System.Guid,System.Collections.Generic.List{System.Guid}@)</codeEntityReference> and <codeEntityReference qualifyHint="false" autoUpgrade="true">M:SecretNest.RemoteAgency.RemoteAgency`2.TryGetWaitingMessageIds(System.Guid,System.Collections.Generic.List{System.Guid}@)</codeEntityReference>) and TryGetWaitingMessage (<codeEntityReference qualifyHint="false" autoUpgrade="true">M:SecretNest.RemoteAgency.RemoteAgency.TryGetWaitingMessage(System.Guid,System.Guid,SecretNest.RemoteAgency.IRemoteAgencyMessage@,System.DateTime@)</codeEntityReference>, <codeEntityReference qualifyHint="false" autoUpgrade="true">M:SecretNest.RemoteAgency.RemoteAgency`2.TryGetWaitingMessage(System.Guid,System.Guid,`1@,System.DateTime@)</codeEntityReference> and <codeEntityReference qualifyHint="false" autoUpgrade="true">M:SecretNest.RemoteAgency.RemoteAgency`2.TryGetWaitingMessage(System.Guid,System.Guid,SecretNest.RemoteAgency.IRemoteAgencyMessage@,System.DateTime@)</codeEntityReference>). Both instance id and message id can be read by message filter.</para>
        <para>While proxy or service wrapper is closing, Remote Agency waits for arrival of all messages no more than the milliseconds set by <codeEntityReference qualifyHint="false">P:SecretNest.RemoteAgency.RemoteAgency.WaitingTimeForDisposing</codeEntityReference>. Then all code still waiting for response will throw an ObjectDisposedException.</para>
        <para>When the response is not required, aka the caller do not need any feedback from remote site, marking the asset with <codeEntityReference qualifyHint="false">T:SecretNest.RemoteAgency.Attributes.AssetOneWayOperatingAttribute</codeEntityReference>. With the <codeEntityReference qualifyHint="false">P:SecretNest.RemoteAgency.Attributes.AssetOneWayOperatingAttribute.IsOneWay</codeEntityReference> is set to true, no return value nor any output parameters will be returned to the caller, and no remote exception will be transmitted either. The caller code continues to run following code immediately with all required return values are set as default. Note that one-way operation for property getting is tuned by <codeEntityReference qualifyHint="false">T:SecretNest.RemoteAgency.Attributes.PropertyGetOneWayOperatingAttribute</codeEntityReference>, other than <codeEntityReference qualifyHint="false">T:SecretNest.RemoteAgency.Attributes.AssetOneWayOperatingAttribute</codeEntityReference>.</para>
        <para>When one-way is not set on the caller side (proxy for methods and properties, service wrapper for events) but set on the other side, <codeEntityReference qualifyHint="false">T:SecretNest.RemoteAgency.AssetNotFoundException</codeEntityReference> will be sent back to the caller. On the contrary, the message will be dropped without processing on the other side.</para>
      </content>
    </section>

    <relatedTopics>
      <codeEntityReference linkText="All attributes">N:SecretNest.RemoteAgency.Attributes</codeEntityReference>
      <link xlink:href="14c3caef-7392-4f68-b7eb-d0bb014a2e4c">Attributes</link>
    </relatedTopics>
  </developerConceptualDocument>
</topic>
