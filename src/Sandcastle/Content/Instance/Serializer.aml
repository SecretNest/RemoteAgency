<?xml version="1.0" encoding="utf-8"?>
<topic id="26d57454-40da-4f5d-aff5-7647aac1acbd" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <introduction>
      <para>In Remote Agency, serializer solution provides generating of the entity classes and serializing of those generated types.</para>
    </introduction>

    <section address="Builtin">
      <title>Built-in serializers</title>
      <content>
        <para>Binary and JSON serializers are shipped within main library of Remote Agency. Developer can choose one of them to initialize the instance of Remote Agency by calling method <codeEntityReference qualifyHint="false" autoUpgrade="true">M:SecretNest.RemoteAgency.RemoteAgency.CreateWithBinarySerializer(System.Nullable{System.Guid})</codeEntityReference> or <codeEntityReference qualifyHint="false" autoUpgrade="true">M:SecretNest.RemoteAgency.RemoteAgency.CreateWithJsonSerializer(System.Nullable{System.Guid})</codeEntityReference>.</para>
      </content>
    </section>

    <section address="OtherSerializer">
      <title>Use other serializer</title>
      <content>
        <para>Also, developer can use any 3rd party serializer written for Remote Agency by passing the instances of serializer and entity type builder through <codeEntityReference qualifyHint="false" autoUpgrade="true">M:SecretNest.RemoteAgency.RemoteAgency.Create``2(SecretNest.RemoteAgency.SerializingHelperBase{``0,``1},SecretNest.RemoteAgency.EntityTypeBuilderBase,System.Nullable{System.Guid})</codeEntityReference>.</para>
        <para>For writing your own serializer, one derived class from <codeEntityReference qualifyHint="false">T:SecretNest.RemoteAgency.EntityTypeBuilderBase</codeEntityReference> is required to build the entity classes. While type building, the information of the entity should be built is passed by arguments of <codeEntityReference qualifyHint="false" autoUpgrade="true">M:SecretNest.RemoteAgency.EntityTypeBuilderBase.BuildEntity(System.Reflection.Emit.TypeBuilder,SecretNest.RemoteAgency.EntityBuilding)</codeEntityReference>, containing properties. If more tuning is required, developer can create attribute classes, mark them on the interfaces, assets and parameters. By specifying the type of those attribute with <codeEntityReference qualifyHint="false">P:SecretNest.RemoteAgency.EntityTypeBuilderBase.InterfaceLevelAttributeBaseType</codeEntityReference>, <codeEntityReference qualifyHint="false">P:SecretNest.RemoteAgency.EntityTypeBuilderBase.AssetLevelAttributeBaseType</codeEntityReference>, <codeEntityReference qualifyHint="false">P:SecretNest.RemoteAgency.EntityTypeBuilderBase.DelegateLevelAttributeBaseType</codeEntityReference> and <codeEntityReference qualifyHint="false">P:SecretNest.RemoteAgency.EntityTypeBuilderBase.ParameterLevelAttributeBaseType</codeEntityReference>, those marks will be read by Remote Agency from service contract interface and passed with the arguments of <codeEntityReference qualifyHint="false" autoUpgrade="true">M:SecretNest.RemoteAgency.EntityTypeBuilderBase.BuildEntity(System.Reflection.Emit.TypeBuilder,SecretNest.RemoteAgency.EntityBuilding)</codeEntityReference>.</para>
      </content>
    </section>

    <section address="Neat">
      <title>Neat version</title>
      <content>
        <para>The neat version of Remote Agency has no built-in serializer, nor sequential scheduler either. For the user won’t use those functions, the neat version is a good choice for reducing referenced packages.</para>
      </content>
    </section>

    <relatedTopics>
      <link xlink:href="e84a4d5d-59a8-43fa-9dca-67fcdffaefd5#neat">Neat version</link>
    </relatedTopics>
  </developerConceptualDocument>
</topic>
